BoundNotMatch	} expected declaration or statement at end of input
BoundRedundant	} expected identifier or  (  before  }  token
NotInclude	for ( ID = CONST ; ID <= CONST ID - CONST ; ID ++ ) fixed-point types not supported for this target
APIcallWrongUsage	printf ( STRING / ID ) ; invalid operands to binary /
BoundLost	printf ( STRING , ID ) expected  ;  before  else
IDNoDef	else printf ( STRING , ID ) ; ID  undeclared
KeyWordWrongUsage	while ( ID != . ) { expected expression before  .  token
BoundLost	printf ( STRING ) } expected  ;  before  }  token
IDWrongUsage	void ID ( , int ID , int ID , int ID , int ID ) expected declaration specifiers or  ...  before  ,  token
opLost	ID = ID ( ID , ( ID + ID ) ) ; incompatible types when assigning to type  BirthData *  {aka  struct birth_data * } from type  ID  {aka  struct birth_data }
APIcallWrongUsage	scanf ( STRING , & ID , ) ; expected expression before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
IDNoDef	ID = CONST ; ID  undeclared
opWrongUsage	else if ( ( float ) ID = CONST ) lvalue required as left operand of assignment
BoundLost	printf ( STRING ) expected  ;  before  for
KeyWordWrongUsage	if ( ( ID ( ID - CONST ) ) <= ID ) && ( ( ID ( ID ) ) > ID ) expected identifier before  (  token
IDNoDef	if ( ID == ( ID - CONST ) ) ID  undeclared
BoundLost	{   printf ( STRING , ID [ ID - CONST ] ) expected  ;  before  printf
APIcallWrongUsage	printf ( STRING , ID ID ) ; expected  )  before  ID
IDNoDef	ID = ID + ID [ ID ] [ ID ] ; ID  undeclared
BoundLost	return ID ( ID + CONST , ID , ID ) expected  ;  before  }  token
BoundLost	ID = CONST expected  ;  before  for
opDataLost	scanf ( STRING , & ID [ ] ) ; expected expression before  ]  token
IDNoDef	ID ++ ; ID  undeclared
opWrongUsage	if ( ( ID / ID ) = ( ID / ID ) ) printf ( STRING ) ; lvalue required as left operand of assignment
APIcallWrongUsage	scanf ( STRING , & ( * ID = ID [ ID ] ) ) ; lvalue required as unary  &  operand
NotInclude	char expected identifier or  (  before  return
BoundLost	printf ( STRING ) expected  ;  before  }  token
KeyWordWrongUsage	if ( char ID [ ID ] == CHARST ) { expected expression before  CHAR
BoundLost	ID = ID / CONST expected  ;  before  }  token
IDNoDef	while ( ID >= ID [ ID ] && ID < ID ) ID  undeclared
BoundWrongUsage	for ( int ID = CONST ; ID < ID , ID ++ ) expected  ;  before  )  token
BoundLost	printf ( STRING ) expected  ;  before  return
IDWrongUsage	int ID ; redeclaration of  ID  with no linkage
BoundNotMatch	} expected declaration or statement at end of input
APIcallWrongUsage	printf ( STRING , ID , ) expected expression before  )  token
opWrongUsage	if ( ID = CONST || ID = CONST || ID = CONST ) { lvalue required as left operand of assignment
BoundLost	ID [ ID ] = ID expected  ;  before  ID
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundRedundant	float ID = CONST * CONST * CONST ) ; expected  ,  or  ;  before  )  token
BoundLost	printf ( STRING ) } ; expected  ;  before  }  token
IDNoDef	ID [ CONST ] = CHARST ; ID  undeclared
APIcallWrongUsage	printf ( STRING , ID . ) ; expected identifier before  )  token
opDataLost	if ( ( ID [ ID ] >= CHART && ID [ ID ] <= CHAR ) && ( ID [ ID + CONST ] >= CHART && ID [ ID + CONST ] <= CHART ) && ) expected expression before  )  token
BoundLost	ID ++ expected  ;  before  }  token
BoundLost	ID = ID + CONST expected  ;  before  }  token
IDNoDef	if ( ID == && ID == ( ID * ( ID - CONST ) ) / CONST ) label  ID  used but not defined
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
BoundLost	scanf ( STRING , ID [ ID ] ) expected  ;  before  }  token
KeyWordWrongUsage	else expected expression before  }  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	else  if ( sqrt ( ( ID - ID ) * ( ID - ID ) - ( ID - ID ) * ( ID - ID ) ) = ID ) { printf ( STRING ) ; } lvalue required as left operand of assignment
IDNoDef	ID = ID ; ID  undeclared
NotInclude	int main ( ) { int ID = CONST ;                                                                                                 int ID = CONST ;                                                                                               int ID = CONST ;                                                                                               int ID = ( ID * ID ) - ( CONST * ID * ID ) ; redefinition of  ID
opDataLost	{ if ( ID > ID && ID < ) expected expression before  )  token
BoundLost	scanf ( STRING , & ID ) expected  ;  before  for
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING , ID ( ID , ID ) ) expected  ;  before  return
IDNoDef	ID = CONST ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
IDWrongUsage	ID = ID + pow ( - CONST , ID + ID - CONST ) * ID ( ID ( ID , ID - CONST ) , ID - CONST ) ; too few arguments to function  ID
BoundLost	} expected  ; , identifier or  (  before  int
KeyWordWrongUsage	else ( ID [ ID ] > ID [ ID ] ) expected  ;  before  {  token
IDNoDef	if ( ID [ CONST ] == ( CONST - ( ID % CONST ) ) ) ID  undeclared
NotInclude	if ( ID [ * ( ID + ID ) ] == CONST ) expected expression before  }  token
BoundLost	ID [ ID ] = ID [ ID - CONST ] + ID [ ID - CONST ] expected  ;  before  }  token
opWrongUsage	float ID = CONST * ID ^ CONST ; invalid operands to binary ^
IDNoDef	if ( ID <= - CONST ) ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	printf ID ; expected  ;  before  ID
BoundLost	return ( ID ( ID , ID , ID + CONST ) || ID ( ID , ID - ID [ ID ] , ID + CONST ) ) expected  ;  before  }  token
KeyWordWrongUsage	else else  without a previous  if
IDNoDef	for ( ID = CONST ; ID < CONST && ID != ID ; ID ++ ) ID  undeclared
BoundLost	scanf ( STRING , ( * ( ID + ID ) ) + ID ) expected  ;  before  }  token
opWrongUsage	if ( ID + ID = ID - CONST ) { lvalue required as left operand of assignment
BoundLost	} printf ( STRING ) expected  ;  before  return
IDNoDef	ID [ ID ] = ( ID [ ID ] - ID ) + CONST + ID [ ID ] ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
opDataLost	if ( * ( ID + ID ) >= CONST && <= CONST ) expected expression before  <=  token
NotInclude	ID ID = ( ID ) malloc ( CONST * ID ) ; expected expression before  ID
APIcallWrongUsage	printf ( STRING , ID , ID . ID ) ; request for member  ID  in something not a structure or union
BoundLost	ID -> ID = ID ( ID ) expected  ;  before  }  token
IDWrongUsage	ID = ID ( ID , ID ) + CONST ; too few arguments to function  ID
KeyWordWrongUsage	for ( ID = CONST ; ) expected expression before  )  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	ID = ( sqrt ( CONST * ID * ID ) ) / CONST expected  ;  before  printf
IDNoDef	while ( ID [ ID ] != CHART ) ID  undeclared
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
BoundLost	scanf ( STRING , ID ) expected  ;  before  for
BoundWrongUsage	for ( ID = CONST , ID < ID ; ID ++ ) expected  ;  before  )  token
opWrongUsage	} * / expected expression before  ID  token
opDataLost	if ( ID + ID <= ( ID + CONST ) / CONST || ID - ID >= ( ID + CONST ) / CONST || ) expected expression before  )  token
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	for ( int ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
opLost	int ID = ( ( ID * ID ) - ( CONST ( ID ) * ID ) ) ; called object is not a function or function pointer
KeyWordWrongUsage	break ; break statement not within loop or switch
BoundRedundant	if ( ( ( ID [ CONST ] ) < CHARST ) && ( ID [ CONST ] ) > CHARST ) ) expected statement before  )  token
APIcallWrongUsage	printf ( STRING , ( ID , ID ) STRING ( ID , ID ) ) ; expected  )  before string constant
BoundLost	ID = CONST expected  ;  before  }  token
NotInclude	ID = ID [ ID ] ; assignment to expression with array type
IDNoDef	for ( ID = ID - ID + CONST ; ID [ ID ] != CHART ; ID ++ ) ID  undeclared
BoundLost	printf ( STRING , ID [ ID - CONST - ID ] ) expected  ;  before  }  token
TypeWrongUsage	if ( int ID [ ID ] > ID [ ID ] ) { expected expression before  int
IDWrongUsage	int ID , ID ; redeclaration of  ID  with no linkage
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
opWrongUsage	while ( ID !=\ ID ) { stray  \  in program
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID [ ID ] [ ID ] ) ; ID  undeclared
BoundLost	int ID = ID expected  ,  or  ;  before  int
KeyWordWrongUsage	{ break ; } break statement not within loop or switch
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	{ ID [ ID ] = ID [ ID ] + ID [ ID ] expected  ;  before  ID
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	ID = ID - CONST expected  ;  before  }  token
BoundLost	ID ( STRING ) expected  ;  before  return
IDNoDef	if ( ID [ ID ] == CHARST ) ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
NotInclude	ID . ID = ID ; expected identifier or  (  before  .  token
opWrongUsage	float ID = sqrt ( ( ID - ID ) * ( ID - ID ) = ( ID - ID ) * ( ID - ID ) ) ; lvalue required as left operand of assignment
BoundLost	break expected  ;  before  }  token
opDataLost	for ( ID = CONST ; ID >= ( CONST * ) ; ID = ID - CONST ) { expected expression before  )  token
IDWrongUsage	void ID ( int ID [ ] , ID ID , int ID , int ID ) { unknown type name  ID ; did you mean  int ?
KeyWordWrongUsage	if ( ( ID [ CONST ] >= CHARST && ID [ CONST ] <= CHARST ) ( ID [ CONST ] >= CHARST && ID [ CONST ] <= CHARST ) && ID [ CONST ] == ( ID [ CONST ] - CONST ) ) called object is not a function or function pointer
BoundLost	ID ++ expected  ;  before  }  token
IDNoDef	for ( int ID = ID ; ID < ID ; ID ++ ) ID  undeclared
APIcallWrongUsage	printf ( STRING ID , ID ) ; expected  )  before  ID
BoundLost	ID ( ID , CONST , CONST ) expected  ;  before  return
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	for ( ID = ID ; ID >= ID ; ID ++ ) ID  undeclared
NotInclude	for ( ID = CONST ; ID < ID ; ID ++ ) { ] expected statement before  ]  token
opWrongUsage	for ( ID = ID - CONST ; ID = > CONST ; ID -- ) { expected expression before  >  token
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
BoundLost	ID = ID ( ID [ ID ] , ID ) expected  ;  before  }  token
opLost	printf ( STRING , CONST ID ) ; invalid suffix "a" on floating constant
IDNoDef	for ( ID = CONST ; ID + ID < ID ; ID ++ ) ID  undeclared
BoundLost	printf ( ID [ CONST ] ) expected  ;  before  return
KeyWordWrongUsage	if ( ID [ ID ] == CHARST ) || ( ID [ ID ] == CHART ) expected expression before  ||  token
BoundRedundant	if  ( ( ID ( ID ) ) >= ID ) && ( ID ( ID ) <= ID ) expected identifier before  (  token
BoundLost	scanf ( STRING , & ( ID -> ID ) ) expected  ;  before  ID
BoundNotMatch	for ( int ID = CONST ; ID [ ID ] != CHARNST ; ID ++ ) empty character constant
IDNoDef	if ( ID == ( ID - CONST ) ) ID  undeclared
BoundLost	char ID = CHAR expected  ,  or  ;  before  printf
APIcallWrongUsage	printf ( STRING , ID , ) ; expected expression before  )  token
BoundLost	ID = ID / CONST expected  ;  before  }  token
KeyWordWrongUsage	else { else  without a previous  if
IDWrongUsage	int ID = int ID ( ID , ID ) ; expected expression before  int
opDataLost	for ( ID = ; ID < CONST ; ID ++ ) expected expression before  ;  token
IDNoDef	if ( ID == CONST ) { return CONST ; } ID  undeclared
BoundLost	} printf ( STRING ) expected  ;  before  return
NotInclude	int ID ; conflicting types for  ID
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	ID = getchar ( ) expected  ;  before  }  token
opWrongUsage	printf ( STRING , ID ( ( ID - ID ) ^ CONST + ( ID - ID ) ^ CONST ) ) ; invalid operands to binary ^
KeyWordWrongUsage	if ( ID == CHART ID ) expected  )  before  ID
IDNoDef	printf ( STRING , ID [ CONST ] ) ; ID  undeclared
BoundLost	ID = - ID expected  ;  before  }  token
BoundLost	ID = ID + ID [ ID ] expected  ;  before  }  token
NotInclude	for ( ID = CONST ; ID <= ID ; ID == * ) { expected expression before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING & ID , & ID ) ; invalid operands to binary &
IDNoDef	for ( ID = ID [ ID - ID - CONST ] + CONST ; ID < ID ; ID ++ ) { ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING , ID , ID ) ; continue expected  ;  before  }  token
IDWrongUsage	ID ( ) ; too few arguments to function  ID
BoundLost	float ID = CONST * CONST * CONST expected  ,  or  ;  before  printf
opWrongUsage	if ( ID != CONST && ID != ID ) { if ( ID + ID == ID + CONST || ID - ID = ID - CONST ) { printf ( STRING ) ; } } lvalue required as left operand of assignment
KeyWordWrongUsage	else { else  without a previous  if
IDNoDef	return ID ; ID  undeclared
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
opDataLost	ID ( ID [ ID ] [ ID ] , ID [ ] [ ID ] ) ; expected expression before  ]  token
BoundLost	int ID = CONST expected  ,  or  ;  before  while
BoundRedundant	long ID , ; expected identifier or  (  before  ;  token
NotInclude	int main ( ) { two or more data types in declaration specifiers
BoundLost	ID ( ID , ID + CONST , ID - CONST ) expected  ;  before  }  token
KeyWordWrongUsage	if ( ID = ID ) && ( ID = ID ) expected identifier before  (  token
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	ID [ ID ] = ID ; ID  undeclared
APIcallWrongUsage	printf ( STRING , STRING ID ) ; expected  )  before  ID
opWrongUsage	if ( ID [ ID ] >= CHARST && ID [ ID ] <= CHARST && ID [ ID + CONST ] = ID [ ID + CONST ] - CONST ) lvalue required as left operand of assignment
BoundLost	} expected  ; , identifier or  (  before  struct
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	for ( int ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
BoundLost	ID = ( ID * ID ) / CONST expected  ;  before  scanf
APIcallWrongUsage	continue ; . expected expression before  .  token
BoundNotMatch	while ( ID != CHARNST && ID < CONST ) { empty character constant
BoundLost	printf ( STRING ) expected  ;  before  ID
IDNoDef	for ( ID = CONST ; ID != ID ; ID ++ ) ID  undeclared
IDWrongUsage	ID ( ID ) ; too few arguments to function  ID
NotInclude	double ID , ID ; expected identifier or  (  before numeric constant
BoundLost	ID = CONST expected  ;  before  for
BoundLost	ID ++ expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID , & ID , & ID , & ID ) ; ID  undeclared
BoundWrongUsage	for ( ID = CONST , ID < ID ; ID ++ ) { expected  ;  before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
opDataLost	else if ( ID == ) { expected expression before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  for
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
KeyWordWrongUsage	else ( ID * ID != ID * ID ) { expected  ;  before  {  token
opWrongUsage	if ( ( ID >= ID && ID >= ID && ID < ID ) || ( ID = < ID && ID >= ID && ID >= ID ) || ( ID >= ID && ID <= ID && ID >= ID ) ) expected expression before  <  token
BoundNotMatch	while ( ( ( ID != CHARNST ) || ( ID != CHART ) || ( ID != CHART ) ) && ( ID < CONST ) ) { empty character constant
BoundLost	printf ( STRING , ID , * ID ) expected  ;  before  scanf
IDNoDef	scanf ( STRING , & ID , & ID , & ID ) ; ID  undeclared
APIcallWrongUsage	getchar ( ID [ ID ] ) ; too many arguments to function  getchar
NotInclude	float expected identifier or  (  before  return
opLost	ID = ID ( CONST + ( ID * ID ) / CONST ) ; called object  ID  is not a function or function pointer
BoundLost	printf ( STRING , ID ) expected  ;  before  return
BoundLost	else { return CONST } expected  ;  before  }  token
IDNoDef	if ( ( ID == CONST ) && ( ID == CONST ) ) ID  undeclared
BoundLost	ID ( ID , CONST , CONST , ID , ID ) expected  ;  before  return
KeyWordWrongUsage	else ID [ ID ] = ID [ ID ] ; else  without a previous  if
APIcallWrongUsage	printf ( STRING ID ID & STRING ) ; expected  )  before  ID
opWrongUsage	ID = ID ( ID * ID = ID * ID ) ; lvalue required as left operand of assignment
TypeWrongUsage	int ID = strlen ( ID ) ; redeclaration of  ID  with no linkage
BoundLost	ID [ ID ] = ID [ ID ] expected  ;  before  return
opDataLost	ID ( ID [ ] , ID ) ; expected expression before  ]  token
IDWrongUsage	ID ( ID ) ; too few arguments to function  ID
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	ID [ ID ] [ ID ] = CONST expected  ;  before  printf
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
IDNoDef	printf ( ID = STRING , ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  if
BoundLost	int ID = pow ( CONST , ID + CONST - ID ) * ID expected  ,  or  ;  before  ID
NotInclude	ID [ ID ] = ( int ) malloc ( CONST * sizeof ( int ) ) ; incompatible types when assigning to type  struct point  from type  int
BoundRedundant	if ( ( ID [ ID ] == ID [ ID ] ) || ( ID [ ID ] == ID [ ID ] ) || ( ID ( ID [ ID ] - ID [ ID ] ) ) == ID ( ID [ ID ]      - ID [ ID ] ) ) ) expected statement before  )  token
opWrongUsage	if ( ID * ID - ID * ID = CONST ) { lvalue required as left operand of assignment
KeyWordWrongUsage	else if ( ) expected expression before  )  token
IDNoDef	scanf ( STRING , & ID , & ID , & ID ) ; ID  undeclared
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
BoundLost	printf ( STRING , ID , * ( ID + ID ) ) expected  ;  before  break
IDNoDef	printf ( STRING , ID ( ID , ID ) ) ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
BoundLost	ID ++ expected  ;  before  return
NotInclude	ID . ID = ID ; ID  is a pointer; did you mean to use  -> ?
opDataLost	scanf ( STRING , & ID [ ] , & ID [ ] ) ; expected expression before  ]  token
opWrongUsage	for ( int ID = CONST ; ID < CONST ; CONST ++ ) { lvalue required as increment operand
KeyWordWrongUsage	if ( ID == CONST &&  ( ID [ ID [ ID ] ] < ID [ ID [ ID + CONST ] ] ) ) expected expression before  else
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	int ID = ID ( CONST , ID + CONST - ID ) expected  ,  or  ;  before  ID
IDWrongUsage	int ID ( char ID [ ] || int ID [ ] ) { expected  ; , ',' or  )  before  ||  token
APIcallWrongUsage	scanf ( STRING , ID , & ID ) expected  ;  before  ID
BoundWrongUsage	for ( ID = CONST ; ID [ ID ] != CHART , ID ++ ) ; expected  ;  before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  return
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	{ int ID = ID ; ID  undeclared
NotInclude	int ID , ID ; conflicting types for  ID
APIcallWrongUsage	scanf ( STRING , & int ID [ CONST ] ) ; expected expression before  int
KeyWordWrongUsage	else { else  without a previous  if
BoundLost	else ( ID % CONST != CONST ) expected  ;  before  printf
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	if ( ID == CHARST ) ID  undeclared
opLost	else return ID [ ID ] ID [ ID - CONST ] ; expected  ;  before  ID
BoundLost	printf ( STRING , ID ) expected  ;  before  return
opDataLost	printf ( STRING , ID [ ] ) ; return ID ( ID , ID - CONST ) ; expected expression before  ]  token
opWrongUsage	if ( ID [ ID ] - ID [ ID - CONST ] = ID [ ID ] - ID [ ID - CONST ] ) lvalue required as left operand of assignment
BoundLost	ID [ ID ] [ CONST - ID ] = ID [ ID ] [ ID ] expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING , ID ID ID ) ; expected  )  before numeric constant
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	ID ( ID , ID , ID ) expected  ;  before  return
KeyWordWrongUsage	if ( pow ( CONST , ID ) <= ID ) && ( ID <= pow ( CONST , ID + CONST ) ) expected identifier before  (  token
NotInclude	printf ( STRING , * ID [ ID ] ) ; invalid type argument of unary  *
BoundLost	return ID ( ID ) expected  ;  before  }  token
opWrongUsage	if ( ID [ ID ] >= CHARST && ID [ ID ] <= CHARST && ID [ ID + CONST ] <= CHARST && ID [ ID + CONST ] >= CHARST && ID [ ID + CONST ] = ID [ ID + CONST ] - CONST ) lvalue required as left operand of assignment
IDWrongUsage	ID ( ID , ID + CONST , ID ) ; too many arguments to function  ID
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	ID = ID ( ID [ ID ] , ID [ ID + CONST ] , ID [ ID + CONST ] ) ; ID  undeclared
BoundRedundant	int ID , ; expected identifier or  (  before  ;  token
IDNoDef	ID = ID ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
opDataLost	ID ( ID [ ] [ CONST ] , ID , ID ) ; expected expression before  ]  token
KeyWordWrongUsage	else ( ID > ID && ID > ID && ID > ID && ID > ID && ID > ID ) { expected  ;  before  {  token
BoundLost	} expected  ; , identifier or  (  before  int
BoundNotMatch	if ( ID == CONST && ID != CHARNST ) { empty character constant
NotInclude	int * ID [ ID ] = ( int * ) malloc ( CONST * sizeof ( int ) ) ; variable-sized object may not be initialized
APIcallWrongUsage	scanf ( STRING & ID , & ID ) ; invalid operands to binary &
BoundLost	printf ( STRING ) expected  ;  before  continue
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
KeyWordWrongUsage	else ( ID == CONST ) expected  ;  before  printf
BoundLost	ID = CONST * ID * ID * ID - CONST * ID expected  ;  before  printf
BoundLost	printf ( STRING ) expected  ;  before  }  token
BoundLost	ID = CONST expected  ;  before  break
IDNoDef	for ( int ID = CONST ; ID != ID ; ID ++ ) { ID  undeclared
opWrongUsage	if ( ( ID [ ID ] <= CHARST ) || ( ( ID [ ID ] >= CHARST ) && ( ID [ ID ] = < CHARST ) ) || ( ID [ ID ] >= CHARST ) ) { expected expression before  <  token
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before numeric constant
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	ID ++ expected  ;  before  ID
KeyWordWrongUsage	if ( if ( ID - ID ) < CONST ) { expected expression before  if
BoundLost	scanf ( STRING , & ID ) expected  ;  before  if
opDataLost	printf ( STRING , ID * ID * ID , ID * ID * , CONST * CONST * CONST , ID ) ; expected expression before  ,  token
NotInclude	ID . ID = ( int * ) ID ( sizeof ( int ) * ID . ID ) ; struct set  has no member named  ID '; did you mean 'n'?
APIcallWrongUsage	printf ( STRING ID , ID ) ; expected  )  before  ID
BoundLost	case CONST : continue expected  ;  before  case
IDNoDef	if ( ID >= ID ) { ID  undeclared
TypeWrongUsage	int ID = ID [ CONST ] ; redeclaration of  ID  with no linkage
BoundLost	printf ( STRING ) expected  ;  before  return
opWrongUsage	ID = ID & ID * ID ; invalid operands to binary &
BoundWrongUsage	printf ( STRING ) : expected  ;  before  :  token
APIcallWrongUsage	printf ( STRING , ) expected expression before  )  token
IDWrongUsage	if ( ID ( ( ID ( ID , ID ) , ID ) == ID ) ) too few arguments to function  ID
BoundNotMatch	while ( ID != CHART && ID != CHARNST && ID != CHART ) empty character constant
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	scanf ( STRING , & ID , & ID , & ID , & ID , & ID ) ; ID  undeclared
KeyWordWrongUsage	while ( ) expected expression before  )  token
IDNoDef	if ( ID [ CONST ] > ID - CONST ) { ID  undeclared
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID ) ; invalid operands to binary &
opWrongUsage	int ID = CONST * ID = CONST + CONST * ID = CONST ; lvalue required as left operand of assignment
BoundRedundant	int ID , ID , ID , ID , ID , ID = CONST , ; expected identifier or  (  before  ;  token
BoundLost	ID += ( ID [ CONST ] >= CHARST && ID [ CONST ] <= CHARST ) ? CONST : CONST expected  ;  before  if
opLost	ID = ID * ID - CONST ID ; invalid suffix "ac" on integer constant
IDNoDef	ID = ID ; CONST ; ID ; ID  undeclared
BoundLost	else ( ID < ID - CONST ) expected  ;  before  printf
NotInclude	for ( ID = CONST ; ID >= CONST ; ID = ID - CONST ) { printf ( STRING , ID * ) ; } expected expression before  )  token
BoundLost	ID = ID * ID expected  ;  before  }  token
opDataLost	if ( ID % / CONST ) expected expression before  ID  token
opWrongUsage	float ID = ( CONST / CONST ) * ID * ID ^ CONST ; invalid operands to binary ^
APIcallWrongUsage	printf ( STRING strlen ( ID ) ) ; expected  )  before  strlen
BoundLost	continue expected  ;  before  }  token
IDNoDef	ID = ( CONST / CONST ) * ID * ID ; ID  undeclared
KeyWordWrongUsage	else if expected  (  before  {  token
BoundLost	printf ( STRING ) expected  ;  before  if
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	ID [ ID ] = CHART ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
KeyWordWrongUsage	if ( ( ID >= CHARST && ID <= CHARST && ID % CONST == CONST ) || ( ID >= CHARST && ID <= CHARST && ID % CONST == CONST ) || ( ID >= CHARST && ID <= CHARST && ID % CONST == CONST ) ) expected expression before  }  token
APIcallWrongUsage	printf ( STRING ID [ ID ] ) ; expected  )  before  ID
IDNoDef	printf ( STRING , ID , ID , ID ) ; ID  undeclared
opWrongUsage	if ( ( ( ID + ID > ID ) && ( ID + ID > ID ) ) && ( ID + ID > ID ) = CONST ) { lvalue required as left operand of assignment
IDWrongUsage	int ID , ID , ID [ CONST ] , ID , ID , ID , ID , ID , ID , ID [ CONST ] ; redeclaration of  ID  with no linkage
BoundLost	ID = CONST expected  ;  before  scanf
BoundLost	ID = ID expected  ;  before  return
APIcallWrongUsage	printf ( STRING ) expected  ;  before  return
NotInclude	if ( ID ( ID , ID ) ) ? printf ( STRING ) : printf ( STRING ) ; expected expression before  ?  token
IDNoDef	scanf ( STRING , ID ) ; ID  undeclared
opWrongUsage	if ( ID = < ID ) expected expression before  <  token
opDataLost	{   int ID = ID ( ID [ ID ] [ ] , ID [ ID ] [ ] , ID [ ID ] [ ] ) ; expected expression before  ]  token
BoundLost	ID ++ expected  ;  before  }  token
KeyWordWrongUsage	else if ( CHARST <= ID [ ID ] <= CHARST ) else  without a previous  if
BoundLost	if ( ID == CONST ) { ID = CONST } expected  ;  before  }  token
BoundLost	printf ( STRING , ID [ CONST ] ) expected  ;  before  }  token
APIcallWrongUsage	if ( ID == CHARNST )	scanf ( STRING , & ID ) ; empty character constant
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
BoundLost	ID [ ID - CONST - ID ] = ID [ ID ] expected  ;  before  printf
BoundLost	ID ( ID , CONST , CONST , ID ) expected  ;  before  return
opWrongUsage	ID = ( CONST / CONST ) * ID * ID ^ CONST ; invalid operands to binary ^
BoundLost	printf ( STRING , ID [ ID ] - ID [ ID ] ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
IDWrongUsage	printf ( STRING , & ID ) expected  ;  before  }  token
opDataLost	for ( ID = CONST ; ID != ID && ; ID ++ ) { expected expression before  ;  token
IDNoDef	printf ( STRING , ID [ ID * ID - ID ] ) ; ID  undeclared
KeyWordWrongUsage	break ; break statement not within loop or switch
opLost	if ( ( ID < CONST ID ) || ( ID > CONST ) || ( ID < CONST ) || ( ID > CONST ) ) invalid suffix "d" on integer constant
NotInclude	ID [ ID ] = CHARST CHARST ; expected  ;  before  ID
BoundLost	ID = CONST expected  ;  before  for
BoundRedundant	int * ID , ID , * ID , ; expected identifier or  (  before  ;  token
BoundLost	} expected  ; , identifier or  (  before  int
IDNoDef	printf ( STRING , ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	scanf ( STRING , & ID , % ID , & ID ) ; expected expression before  %  token
BoundLost	ID == CONST * ID expected  ;  before  ID
NotInclude	int ID [ ID ] = ID ; variable-sized object may not be initialized
opDataLost	for ( ID = ; ID <= ID ; ID ++ ) expected expression before  ;  token
BoundWrongUsage	for ( ID = CONST ; ID < ID - CONST , ID ++ ) { expected  ;  before  )  token
opWrongUsage	} CHARST = CHARST + CONST ; lvalue required as left operand of assignment
BoundLost	printf ( STRING ) expected  ;  before  }  token
KeyWordWrongUsage	for ( ID >= ID ; ID == ( CHARST ) ) expected  ;  before  )  token
TypeWrongUsage	int ID = CONST ; redeclaration of  ID  with no linkage
IDNoDef	return ID ; ID  undeclared
BoundLost	printf ( STRING , ID ) } expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	} printf ( STRING , ID ) ; printf ( STRING ) expected  ;  before  if
opWrongUsage	if ( ( ID * ID ) = ( ID * ID ) ) { lvalue required as left operand of assignment
IDNoDef	if ( ID [ ID ] == ID ) ID  undeclared
APIcallWrongUsage	scanf ( STRING . & ID ) ; expected identifier before  &  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
NotInclude	char ID [ CONST ] ; conflicting types for  ID
BoundNotMatch	} expected declaration or statement at end of input
KeyWordWrongUsage	} break ; break statement not within loop or switch
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  return
opWrongUsage	( ID + ID ) = ( char * ) malloc ( ID * sizeof ( char ) ) ; lvalue required as left operand of assignment
BoundLost	ID = ID expected  ;  before  while
APIcallWrongUsage	printf ( STRING , * ) ; expected expression before  )  token
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
opDataLost	for ( ID = CONST ; ID < ; ID ++ ) { expected expression before  ;  token
BoundLost	int ID expected  = , ',',  ; ,  asm  or  __attribute__  before  return
BoundLost	return ID ( ID , ID , ID ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
IDWrongUsage	int ID ( char * ID , int ID , ID ) unknown type name  ID
IDNoDef	printf ( STRING , ID [ ID - ID ] ) ; ID  undeclared
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  return
KeyWordWrongUsage	for ( ID = CONST ; ID <= ID ) expected  ;  before  )  token
BoundNotMatch	} expected declaration or statement at end of input
NotInclude	return ID * * * ID ( * ( ID + CONST ) + CONST , ID - CONST ) ; invalid type argument of unary  *
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  ID
BoundLost	ID ( ) expected  ;  before  ID
KeyWordWrongUsage	if ( ID [ ID ] <= CHARST && ID [ ID ] >= CHARST ) || ( ID [ ID ] >= CHARST && ID [ ID ] <= CHARST ) ID = CONST ; expected expression before  ||  token
IDNoDef	ID = ID ( ID ) ; ID  undeclared
opDataLost	ID = ; expected expression before  ;  token
IDWrongUsage	ID = ( struct ID * ) calloc ( CONST * sizeof ( struct ID ) ) ; too few arguments to function  calloc
BoundLost	ID ++ expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID , ID , ID ) ; expected  )  before numeric constant
BoundLost	return CONST expected  ;  before  }  token
BoundNotMatch	if ( ID == CHARNST ) break ; empty character constant
IDNoDef	ID ( ID , ID , ID , CONST ) ; ID  undeclared
opWrongUsage	printf ( STRING , ( ID = CONST ) ? STRING : STRING ) ; lvalue required as left operand of assignment
BoundLost	ID ++ expected  ;  before  }  token
BoundRedundant	if ( ( ID - ID ) == CONST ) ) expected statement before  )  token
NotInclude	ID ( ID == CONST ) { printf ( STRING ) ; } expected  ;  before  {  token
BoundLost	int ID = CONST expected  ,  or  ;  before  while
BoundLost	{ ID ++ ; ID = CONST ; } printf ( STRING , ID [ CONST ] ) expected  ;  before  }  token
NotInclude	ID [ ID ] = char ( ID [ ID ] + ( CONST ) ) ; expected expression before  CHAR
APIcallWrongUsage	printf ( STRING ID / STRING ) ; expected  )  before  ID
opWrongUsage	ID % CONST = ID ; lvalue required as left operand of assignment
IDNoDef	scanf ( STRING , & ID , & ID , & ID ) ; ID  undeclared
BoundLost	printf ( STRING , ID ( ID , ID ) ) expected  ;  before  return
KeyWordWrongUsage	if ( ID [ ID ] == char ) expected expression before  CHAR
BoundLost	case CONST : printf ( STRING ) ; break expected  ;  before  }  token
IDWrongUsage	ID = ID ( ID , ID , ID , ID ) ; too many arguments to function  ID
BoundLost	printf ( STRING ) expected  ;  before  ID
IDNoDef	for ( ID = CONST ; ID [ ID ] != CHART ; ++ ID , ++ ID ) ID  undeclared
APIcallWrongUsage	scanf ( STRING , & ID . ID , & ID . ID , & ID   . ID ) ; expected expression before  ID
BoundLost	char ID [ CONST ] expected  = , ',',  ; ,  asm  or  __attribute__  before  return
opDataLost	printf ( STRING , ID ( ID [ ] ) ) ; expected expression before  ]  token
BoundNotMatch	} expected declaration or statement at end of input
opWrongUsage	if ( ( ID * ID + ID * ID ) = ID * ID ) { lvalue required as left operand of assignment
IDNoDef	ID [ ID ] = ID [ ID ] [ ID ] ; ID  undeclared
APIcallWrongUsage	scanf ( STRING & ID [ ID ] ) ; invalid operands to binary &
BoundLost	char ID = CHART expected  ,  or  ;  before  printf
NotInclude	char ID [ CONST ] = { ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID , ID / ; } ; expected expression before  ;  token
opWrongUsage	printf ( STRING , CONST * ( ID ^ CONST ) - CONST * ID ) ; invalid operands to binary ^
IDNoDef	printf ( STRING , ID [ ID ] ) ; ID  undeclared
KeyWordWrongUsage	break ; break statement not within loop or switch
BoundLost	printf ( STRING ) expected  ;  before  return
BoundWrongUsage	for ( ID = CONST ; ID < ( ID . ID ) , ID ++ ) expected  ;  before  )  token
BoundLost	int ID = CONST expected  ,  or  ;  before  scanf
IDNoDef	printf ( STRING , ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
opLost	for ( int ID = CONST ; ID < CONST ID ; ID ++ ) { invalid suffix "n" on integer constant
BoundLost	return ID ( ID + CONST , ID ) expected  ;  before  }  token
KeyWordWrongUsage	for ( int ID = ID + CONST ; ID < CONST ) { expected  ;  before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
IDNoDef	while ( ID != ID ) printf ( STRING , ID [ ID ++ ] ) ; ID  undeclared
NotInclude	printf ( STRING . ID [ ID ] ) ; request for member  ID  in something not a structure or union
TypeWrongUsage	int ID = CONST ; redeclaration of  ID  with no linkage
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	ID ( ID , ID - CONST ) ; ID  undeclared
opWrongUsage	if ( ID / ID = ID / ID ) lvalue required as left operand of assignment
IDWrongUsage	int ID ( int ID [ CONST ] [ CONST ] , ID ) { unknown type name  ID
BoundLost	ID ( ID , CHARST , CHARST , CHARST ) expected  ;  before  return
IDNoDef	scanf ( STRING , & ID , & ID , & ID , & ID , & ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  }  token
BoundRedundant	char ID , ID , ID , ; expected identifier or  (  before  ;  token
BoundNotMatch	if ( ID == CONST && ID != CHARNST ) { empty character constant
KeyWordWrongUsage	( ID <= CHARST || ID >= CHARST ) printf ( STRING ) ; expected  ;  before  printf
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
BoundLost	ID = ID expected  ;  before  continue
IDNoDef	putchar ( ID ) ; ID  undeclared
NotInclude	continue ; continue statement not within a loop
opWrongUsage	CHARST = CHARST + CHARST - CHARST ; lvalue required as left operand of assignment
opDataLost	{   int ID = ID ( ID [ ID ] [ ID ] , ID [ ID ] [ ID ] , ID [ ] [ ID ] ) ; expected expression before  ]  token
BoundLost	printf ( STRING , ID ( ID ) ) expected  ;  before  return
IDNoDef	if ( ID > CONST ) ID  undeclared
BoundLost	ID = ID - CONST expected  ;  before  return
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
BoundLost	printf ( STRING ) expected  ;  before  return
KeyWordWrongUsage	for ( ID = CONST ; ID , < ID ; ID ++ ) expected expression before  <  token
IDNoDef	for ( ID = CONST ; ID < ( ID > ID ) ; ID ++ ) ID  undeclared
NotInclude	ID = ( ID ) ID ( ID * sizeof ( ID ) ) ; conversion to non-scalar type requested
BoundLost	ID ( ID , ID ) expected  ;  before  return
BoundWrongUsage	float ID = ID ( ID * ID + ID * ID ) : expected  ,  or  ;  before  :  token
opWrongUsage	else if ( ID == CONST % % ( ID / ID ) == CONST ) expected expression before  %  token
BoundLost	return - CONST expected  ;  before  }  token
IDNoDef	for ( ID = CONST ; ID <= ( ID - ID ) ; ID ++ ) ID  undeclared
NotInclude	ID = ID [ ID ] ; incompatible types when assigning to type  struct birth_data *  from type 'struct birth_data'
KeyWordWrongUsage	if ( ( ID [ ID ] >= CONST && ID [ ID ] <= CONST ) && ( ID [ ID + CONST ] >= CONST && ID [ ID + CONST ] <= CONST ) ( ID [ ID + CONST ] >= CONST && ID [ ID + CONST ] <= CONST ) ) called object is not a function or function pointer
IDWrongUsage	{   int ID , ID , ID , ID , ID , ID [ CONST ] [ CONST ] , ID = CONST , ID , ID ; redeclaration of  ID  with no linkage
BoundLost	printf ( STRING , ID -> ID ) expected  ;  before  ID
opDataLost	printf ( STRING , ID , ID [ ] ) ; expected expression before  ]  token
BoundLost	ID ( ID , ID ) expected  ;  before  ID
APIcallWrongUsage	printf ( STRING , CONST ++ * CONST ) ; lvalue required as increment operand
BoundRedundant	if ( ( ID [ ID ] >= CONST ) && ID [ ID ] < ID ) ) { expected statement before  )  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING ) expected  ;  before  else
IDNoDef	if ( ID == ID - CONST ) ID  undeclared
NotInclude	# < ID . ID > invalid preprocessing directive #<
IDWrongUsage	void ID ( int ID [ ] , int ID , ID ) unknown type name  ID
opWrongUsage	float ID = ID * ( ID ^ CONST ) ; invalid operands to binary ^
BoundLost	{ ID = CONST expected  ;  before  break
IDNoDef	scanf ( STRING , ( * ( ID + ID ) + ID ) ) ; ID  undeclared
BoundLost	ID [ ID ] expected  ;  before  for
IDNoDef	ID [ ID ] = ID [ ID % CONST ] ; ID  undeclared
APIcallWrongUsage	printf ( STRING ( ID - ID ) ) ; called object is not a function or function pointer
BoundLost	printf ( STRING , ID [ ID ] . ID , ID [ ID ] . ID , ID [ ID ] . ID , ID [ ID ] . ID ) expected  ;  before  return
KeyWordWrongUsage	while ( ID [ ID ] != STRING ) subscripted value is neither array nor pointer nor vector
BoundLost	ID = ID + CONST expected  ;  before  if
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
APIcallWrongUsage	ID [ ID ] = putchar ( ) ; too few arguments to function  putchar
opWrongUsage	for ( ID = CONST ; ID [ ID ] !=\ CONST ; ID ++ ) stray  \  in program
BoundLost	printf ( STRING , ID ) expected  ;  before  return
opLost	ID = sqrt ( CONST ) ID ; expected  ;  before  ID
IDNoDef	ID = ID [ ID ] ; ID  undeclared
BoundLost	else ( ID == CONST ) expected  ;  before  {  token
APIcallWrongUsage	case CONST ; printf ( STRING ) ; break ; expected  :  or  ...  before  ;  token
KeyWordWrongUsage	break ; break statement not within loop or switch
BoundLost	break } expected  ;  before  }  token
BoundNotMatch	} expected declaration or statement at end of input
opDataLost	ID [ ] = getchar ( ) ; expected expression before  ]  token
opWrongUsage	if ( ID == ID [ ID ] && ID = CONST ) lvalue required as left operand of assignment
IDNoDef	{ ID += ID [ ID ] ; ID += ID [ ID + CONST ] ; } ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
NotInclude	for ( ID = CONST ; ID [ CONST ] != ID ; ID ++ ) subscripted value is neither array nor pointer nor vector
BoundLost	printf ( STRING ) expected  ;  before  return
IDWrongUsage	ID ( ID , ID ) ; too many arguments to function  ID
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
opDataLost	ID ( ID [ ID ] [ ID ] , ID [ ID ] [ ID ] , ID [ ] [ ID ] ) ; expected expression before  ]  token
IDNoDef	printf ( STRING , ID [ ID ] ) ; ID  undeclared
BoundLost	printf ( STRING , ID - CONST ) expected  ;  before  }  token
BoundRedundant	float ID , ID , ; expected identifier or  (  before  ;  token
opWrongUsage	for ( ID = CONST ; ID < CONST || ID = ID ; ID ++ ) lvalue required as left operand of assignment
BoundLost	ID == ID expected  ;  before  if
BoundNotMatch	} expected declaration or statement at end of input
NotInclude	printf ( STRING ) expected  ;  before  return
IDNoDef	return ID ( ID + CONST , ID - CONST ) ; ID  undeclared
BoundLost	printf expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID , ID , ID ) ; expected  )  before  ID
BoundWrongUsage	for ( ID = CONST ; ID < ID , ID ++ ) expected  ;  before  )  token
opDataLost	int ID = CONST , ID , ID [ ] [ ID ] ; array size missing in  ID
BoundLost	ID = ID + ID + ID + ID expected  ;  before  }  token
NotInclude	ID = ID ; assignment to expression with array type
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
BoundLost	ID ++ expected  ;  before  }  token
KeyWordWrongUsage	else else  without a previous  if
APIcallWrongUsage	scanf ( STRING , & ID , & ID , & ID , ) ; expected expression before  )  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
opWrongUsage	ID -> ID = CONST * ( ID -> ID ) ; invalid operands to binary *
IDNoDef	ID ++ ; } ID  undeclared
BoundLost	ID ( ID , CONST ) expected  ;  before  printf
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
NotInclude	ID ( ID , ) expected expression before  )  token
BoundLost	ID [ ID ] = ID [ ID ] expected  ;  before  }  token
BoundRedundant	else { printf ( STRING ) ; ) } expected statement before  )  token
IDNoDef	scanf ( STRING , ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	if ( ID == CONST ) printf ( STRING ID ) ; expected  )  before  ID
KeyWordWrongUsage	if ( ID == CHARST || ID == CHARST || ID == CHARST ID == STRING ID == STRING ) expected  )  before  ID
BoundLost	ID += ( ID ) expected  ;  before  }  token
opWrongUsage	if ( ( ID [ ID ] != ID ) && ( ID [ ID ] = != ID ) ) expected expression before  !=  token
IDNoDef	putchar ( ID [ ID - ID ] ) ; ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
IDWrongUsage	return ( ( ID % ID ) * ID ( ID , ID - CONST ) % ID ) % ID ; too few arguments to function  ID
BoundLost	printf ( STRING , ID ) expected  ;  before  if
NotInclude	ID = ( ID * ID * ( ID - ID ) . ) / ( ID * ID - ID * ID ) ; expected identifier before  )  token
opDataLost	if ( ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ID [ ID ] == CHARST || ) expected expression before  )  token
IDNoDef	for ( ID = CONST ; ID < CONST && ID [ ID ] != CHART ; ID ++ ) ; ID  undeclared
BoundLost	printf ( STRING , ID ( CONST ) ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
IDNoDef	ID [ ID ++ ] = ID ; ID  undeclared
KeyWordWrongUsage	else if ( ID < CONST ) else  without a previous  if
BoundLost	ID [ ID ++ ] = ID [ ID ++ ] expected  ;  before  }  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	if ( ID [ ID ] > ID [ ID - CONST ] ) { ID  undeclared
opWrongUsage	while ( ID [ ID ] !=\ CONST ) { stray  \  in program
BoundWrongUsage	for ( ID = CONST , ID <= ID - ID && ID <= ID ; ID ++ ) expected  ;  before  )  token
BoundNotMatch	if ( ID [ ID ] == CHARNST ) empty character constant
BoundLost	printf ( STRING , ID ) expected  ;  before  return
NotInclude	printf ( ( STRING , ( ( ID + CONST ) . ID ) ) ) ; a + 16  is a pointer; did you mean to use  -> ?
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before numeric constant
opWrongUsage	{  / printf ( STRING , ID ) ; expected expression before  ID  token
KeyWordWrongUsage	for ( * ID != ID ; ID ++ ) expected  ;  before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  for
opDataLost	ID ( ID [ ] , ID , ID + ID ) ; expected expression before  ]  token
IDNoDef	ID = ID ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  printf
opLost	ID = CONST * ID ( ID * ID - ID * ID ) ; called object  ID  is not a function or function pointer
IDWrongUsage	ID ( ID , ID ) ; too many arguments to function  ID
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
IDNoDef	ID = ID + ID ; ID  undeclared
NotInclude	ID = ID ( ID , ID ) ; assignment to expression with array type
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	while ( ID [ ID ] ! STRING ) { expected  )  before  !  token
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
KeyWordWrongUsage	for ( ID = CONST ; ID ++ ) expected  ;  before  )  token
IDNoDef	{ scanf ( STRING , & ID ) ; ID  undeclared
opDataLost	int ID [ ] [ CONST ] ; array size missing in  ID
BoundRedundant	if ( ID == CONST ) ) expected statement before  )  token
BoundLost	ID = ID ++ expected  ;  before  }  token
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	ID ( ID , ID * CONST , ID ( ID , ID , ( ID * CONST ) - CONST ) , ( ID * CONST ) - CONST ) ; ID  undeclared
BoundLost	if ( ID == CONST ) ID = CONST expected  ;  before  break
BoundLost	ID = ID ( ID , & ID [ ID ] [ CONST ] ) expected  ;  before  }  token
APIcallWrongUsage	case CONST ; printf ( STRING ) ; break ; expected  :  or  ...  before  ;  token
KeyWordWrongUsage	if ( ID % CONST == CONST ) && ( ID % CONST == CONST ) { expected identifier before  (  token
IDNoDef	ID = ( char * * ) malloc ( ID * sizeof ( char ) ) ; ID  undeclared
BoundLost	ID ++ expected  ;  before  ID
NotInclude	return ID ; incompatible types when returning type  R *  {aka  struct range * } but  ID  {aka  struct range } was expected
IDNoDef	ID [ ID ] = ID [ ID - CONST - ID ] ; ID  undeclared
BoundLost	printf ( STRING , ID [ CONST ] ) expected  ;  before  return
opWrongUsage	ID > CONST || ID = CONST ; lvalue required as left operand of assignment
IDWrongUsage	void ID ( ID * ID , int ID ) unknown type name  ID ; did you mean  ID ?
BoundLost	ID [ ID ] = ID ( ID [ ID ] + CONST , ID [ ID ] ) expected  ;  before  }  token
TypeWrongUsage	return int ID ; expected expression before  int
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
APIcallWrongUsage	printf ID [ ID ] ; expected  ;  before  ID
KeyWordWrongUsage	ID = ID * CONST + ID % CONST ; expected expression before  =  token
BoundLost	else ( ID = CONST ) expected  ;  before  printf
opWrongUsage	printf = ( STRING , ID , ID , ID , ID , ID ) ; lvalue required as left operand of assignment
NotInclude	for ( ID = CONST ; ID < CONST ; ID = ID + ID ( ID - CONST ) ) { called object  ID  is not a function or function pointer
BoundNotMatch	return CONST ; expected declaration or statement at end of input
IDNoDef	for ( ID = ID ; ID != ID && ID < ( ID + ID ) ; ID ++ ) ID  undeclared
opDataLost	ID ( ID [ ] [ CONST ] , ID [ ] [ CONST ] , ID [ ] [ CONST ] ) ; expected expression before  ]  token
BoundLost	scanf ( STRING , ID + ID ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ) expected  ;  before  printf
BoundLost	ID [ ID ] = ID [ ID ++ ] expected  ;  before  printf
IDNoDef	if ( ID [ ID ] == CHARST ) ID  undeclared
opWrongUsage	if ( ID - ID / ID - ID = ID - ID / ID - ID ) { lvalue required as left operand of assignment
NotInclude	ID = ID + double ( ID ( - CONST , ID ) ) * ID ( ID , CONST * ID ) / ID ( CONST * ID ) ; expected expression before  double
BoundWrongUsage	for ( ID = CONST ; ID <= ID , ID ++ ) { expected  ;  before  )  token
BoundNotMatch	} expected declaration or statement at end of input
KeyWordWrongUsage	while ( ) expected expression before  )  token
IDWrongUsage	ID = ID ( int ID ) ; expected expression before  int
BoundLost	if ( ID == CONST ) ID = CONST ; if ( ID == CONST ) ID = CONST expected  ;  before  printf
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	ID = ( ID - ID ) expected  ;  before  }  token
opLost	ID = ( ID - ID ) ( ID * ID ) / ( ID * ID - ID * ID ) ; called object is not a function or function pointer
IDNoDef	scanf ( STRING , & ID , & ID , ID , ID ) ; ID  undeclared
opWrongUsage	if ( ID [ ID ] = < CHARST && ID [ ID ] >= CHARST ) { expected expression before  <  token
BoundRedundant	if ( ID ( ID ) == CONST && ID ( ID - ID ) == CONST ) ) { expected statement before  )  token
BoundLost	ID ( ID , ID , ID + CONST ) expected  ;  before  }  token
IDNoDef	while ( ID != ID ) ID  undeclared
APIcallWrongUsage	printf ( STRING   ID [ ID ] [ ID ] , ID , ID ) ; expected  )  before  ID
BoundLost	else ID ( STRING ) expected  ;  before  }  token
BoundLost	ID = CONST expected  ;  before  scanf
NotInclude	if ( * ( ID + ID ) >= * ( ID + ID - CONST ) ) expected expression before  int
KeyWordWrongUsage	return CONST ; incompatible types when returning type  int  but  ID  {aka  struct birth_data } was expected
opDataLost	ID ( ID [ ] , ID ) ; expected expression before  ]  token
BoundLost	ID = ID ( ID ) expected  ;  before  printf
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	{   ID [ ID ] = ID [ ID ] expected  ;  before  ID
APIcallWrongUsage	scanf ( STRING ID , ID , ID ) ; expected  )  before  ID
IDWrongUsage	int ID ; redeclaration of  ID  with no linkage
opWrongUsage	if ( ( ID ! + ID ) && ( ID == ID ) ) { expected  )  before  !  token
IDNoDef	printf ( STRING , ID [ CONST ] ) ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
KeyWordWrongUsage	else ( ID > ID ) expected  ;  before  printf
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  return
NotInclude	for ( ID = CONST ; ID <= ( ID - ID + ) ; ID ++ ) expected expression before  )  token
APIcallWrongUsage	printf ( STRING , ID [ ID ] ) ; ID ++ ;  } printf ( % STRING , ID ) ; expected expression before  %  token
BoundLost	int main ( ) { printf ( STRING , CONST * CONST * CONST ) expected  ;  before  return
IDNoDef	if ( ID == ID [ CONST ] && ( ID == CHARST || ID == CHARST || ID == CHARST || ID == CHARST ) ) ID  undeclared
BoundLost	{ printf ( STRING , ID [ ID ] ) expected  ;  before  ID
BoundLost	for ( ID = CONST ; ID < ID ; ID ++ ) { ID ++ expected  ;  before  if
IDNoDef	ID = sqrt ( CONST / CONST * ID ) ; ID  undeclared
KeyWordWrongUsage	if ID > CONST { expected  (  before  ID
opDataLost	for ( ID = CONST ; ID < ID < ; ID ++ ) expected expression before  ;  token
APIcallWrongUsage	putchar ( ) ; too few arguments to function  putchar
opWrongUsage	for ( ; ID !=\ CONST ; ID ++ ) { stray  \  in program
BoundLost	scanf ( STRING , ID ) expected  ;  before  printf
NotInclude	ID ( ( ID -> ID ) > CONST ) { expected  ;  before  {  token
BoundLost	ID [ ID ] = getchar ( ) expected  ;  before  while
APIcallWrongUsage	printf ( STRING ID / STRING ) ; expected  )  before  ID
BoundLost	printf ( STRING , ID [ ID ] [ ID ] ) expected  ;  before  printf
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
KeyWordWrongUsage	break ; break statement not within loop or switch
IDWrongUsage	if ( int ID ( ID ) == CONST ) expected expression before  int
IDNoDef	for ( ID = CONST ; ID < ID ( ID ) ; ID ++ ) printf ( STRING , ID [ ID ] ) ; ID  undeclared
BoundLost	int ID = ID * ( ID - CONST ) + CONST expected  ,  or  ;  before  printf
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	printf ( STRING , ID [ CONST ] , ID [ CONST ] , ID [ CONST ] , ID [ CONST ] ) expected  ;  before  return
NotInclude	STRING invalid initializer
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  ID
opWrongUsage	while ( ID ! ID ) { expected  )  before  !  token
BoundNotMatch	} expected declaration or statement at end of input
BoundWrongUsage	for ( int ID = CONST ; ID < ID , ID ++ ) expected  ;  before  )  token
opDataLost	if ( ID ( ID [ ] , ID [ ] , ID , ID ) == CONST ) expected expression before  ]  token
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
BoundLost	int ID = ID ( ID , CONST ) expected  ,  or  ;  before  printf
KeyWordWrongUsage	if ( ( ID % ID ) != CONST ) && ( ( ID % ID ) != CONST ) expected identifier before  (  token
BoundLost	printf ( STRING , ID ) expected  ;  before  for
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
BoundLost	ID ++ expected  ;  before  for
APIcallWrongUsage	printf ( STRING , ID ID ) ; expected  )  before  ID
opWrongUsage	ID = CONST * ID * ID ^ CONST ; invalid operands to binary ^
BoundRedundant	int ID , ID , ID , ; expected identifier or  (  before  ;  token
NotInclude	int CONST * ID ; expected identifier or  (  before numeric constant
BoundLost	if ( ID == CONST && ID == CONST ) ID [ ID ] [ ID ] = CONST expected  ;  before  }  token
opDataLost	scanf ( STRING , ID [ ] ) ; expected expression before  ]  token
BoundLost	ID -> ID = ID expected  ;  before  ID
KeyWordWrongUsage	else else  without a previous  if
IDNoDef	{   if ( ID >= ID [ ID - CONST ] ) ID  undeclared
BoundLost	ID += CONST expected  ;  before  }  token
opWrongUsage	if ( ( ID % CONST == CONST && ID % CONST != CONST ) ! ! ( ID % CONST == CONST && ID % CONST != CONST ) ) { expected  )  before  !  token
IDNoDef	ID = ID + CONST ; ID  undeclared
IDWrongUsage	ID ( ID + CONST , ID , ID , ID ) ; too few arguments to function  ID
BoundLost	scanf ( STRING , ID [ ID ] ) expected  ;  before  }  token
opDataLost	while ( ID != ) expected expression before  )  token
opLost	ID = sqrt ( CONST ID / CONST ) ; invalid suffix "a" on integer constant
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
BoundLost	int ID , ID , ID expected  = , ',',  ; ,  asm  or  __attribute__  before  int
NotInclude	switch ( char ) { expected expression before  CHAR
IDNoDef	while ( ID [ ID ] != CHART ) { ID  undeclared
BoundLost	{ ID = ID ( ID - ID , ID - ID ) expected  ;  before  for
KeyWordWrongUsage	else else  without a previous  if
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	if ( ID > ID ) { ID = ID - ID [ ID ] return ID ( ID , ID [ ID + CONST ] ) ; } expected  ;  before  return
APIcallWrongUsage	printf ( STRING , ID , ID , ID , ID , ID ( ID ) . ) ; expected identifier before  )  token
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
BoundLost	ID ++ } expected  ;  before  }  token
IDNoDef	ID ++ ; ID  undeclared
NotInclude	if ( ID [ ID ] [ ID + CONST ] == CHARST || ID [ ID + CONST ] ID [ ID ] == CHARST ) expected  )  before  ID
IDWrongUsage	ID ( ID , ID , ID - CONST , ID ) ; too many arguments to function  ID
BoundLost	ID ++ expected  ;  before  ID
opWrongUsage	while ( ID !=\ ID ) stray  \  in program
APIcallWrongUsage	scanf ( STRING , & CHARST ) ; lvalue required as unary  &  operand
BoundLost	printf ( STRING ) expected  ;  before  if
IDNoDef	if ( ID != ( ID - CONST ) ) ID  undeclared
KeyWordWrongUsage	else else  without a previous  if
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
opDataLost	printf ( STRING , ID [ ] ) ; expected expression before  ]  token
BoundLost	else ( ID [ ID ] = ID [ ID ] ) expected  ;  before  ID
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundNotMatch	if ( ID [ ID ] [ ID ] != ID [ ID - CONST + ( ID - ID ) ] [ ID + ( ID - ( ID - CONST ) ] ) expected  )  before  ]  token
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
BoundLost	int main ( ) { printf ( STRING ) expected  ;  before  return
IDNoDef	for ( ID = ID ; ID < CONST ; ID ++ ) { ID  undeclared
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  }  token
NotInclude	ID = ( CONST / CONST ) ID * ( ID * ID - ID * ID ) ; expected  ;  before  ID
APIcallWrongUsage	printf ( STRING , ID [ CONST ] . ID ) ; ID ++ ; ID ++ ; struct set  has no member named  ID
BoundLost	ID = ID ( ID ) expected  ;  before  if
IDNoDef	ID [ ID ] = ID [ ID ] ; ID  undeclared
KeyWordWrongUsage	if ( ID == CONST ) ID [ ID ] = ID [ ID ] , expected expression before  else
opWrongUsage	( ID - CONST ) = ( ID - CONST ) / CONST ; lvalue required as left operand of assignment
BoundRedundant	int ID , ; expected identifier or  (  before  ;  token
BoundLost	ID = ID + ID ( ( ID + CONST ) , CONST * ID ) / ID ( CONST * ID + CONST ) expected  ;  before  printf
BoundLost	ID = CONST expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID , ID , ID , ID ) ; expected  )  before numeric constant
BoundLost	ID [ ID ] = ID [ ID ] expected  ;  before  break
NotInclude	printf ( STRING , ID ( ID , ID , ID ) ) ; invalid use of void expression
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	if ( ( ID % CONST != = CONST ) && ( ID % CONST == CONST ) ) { expected expression before  =  token
BoundWrongUsage	for ( ID = CONST , ID [ ID ] != CHART ; ID ++ ) { expected  ;  before  )  token
TypeWrongUsage	int ID = ID ; redeclaration of  ID  with no linkage
KeyWordWrongUsage	{ if ( ID [ CONST ] == CONST || ID [ CONST ] == CONST || ID [ CONST ] == CONST || ID ( CONST ) == CONST ) called object  ID  is not a function or function pointer
opDataLost	int ID = ID ( ID [ ] , ID ) ; expected expression before  ]  token
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
IDWrongUsage	if ( ID ( ID [ ID ] == CONST ) ) { too few arguments to function  ID
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
BoundNotMatch	} expected declaration or statement at end of input
opLost	ID = ID ( CONST + ( ID * ID / CONST ) ) ; called object  ID  is not a function or function pointer
BoundLost	{ ID [ ID ] = ID [ ID ] * ( ID - ID ) } ; expected  ;  before  }  token
BoundLost	ID ++ expected  ;  before  }  token
opWrongUsage	if ( * ID == ID [ CONST ] ) { invalid operands to binary ==
NotInclude	ID [ ID ] = ID [ ID ] ID [ ID ] ; expected  ;  before  ID
APIcallWrongUsage	scanf ( STRING ID ) ; expected  )  before  ID
IDNoDef	if ( ID == ID ) ID  undeclared
BoundLost	return CONST expected  ;  before  }  token
IDWrongUsage	ID ID = ID ( ID , ID ) ; unknown type name  ID ; did you mean  int ?
BoundLost	ID = ID -> ID expected  ;  before  }  token
NotInclude	ID = ID ; assignment to expression with array type
KeyWordWrongUsage	for ( int ID = CONST ; ID , = ID ; ID ++ ) expected expression before  =  token
IDNoDef	printf ( STRING , ID [ ID - CONST ] ) ; ID  undeclared
BoundLost	ID  = - ( ID ) expected  ;  before  }  token
opWrongUsage	for ( ID = CONST ; ID = < ID ; ID ++ ) { expected expression before  <  token
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
BoundLost	{ ID ++ } expected  ;  before  }  token
IDNoDef	for ( ID = ID ; ID < ID + ID ; ID ++ ) { ID  undeclared
BoundLost	puts ( ID ) expected  ;  before  return
KeyWordWrongUsage	for ( ID = CONST , ID = ID ; ( ID + ID ) = ID , ID <= ID , ID <= ID ; ID ++ , ID -- ) lvalue required as left operand of assignment
BoundLost	case CONST : printf ( STRING ) expected  ;  before  return
BoundNotMatch	while ( ID [ ID ] == CHARNST ) { empty character constant
APIcallWrongUsage	printf ( STRING ID , ID , ID ) ; expected  )  before  ID
BoundLost	printf ( STRING ) expected  ;  before  }  token
NotInclude	ID = ID [ ID ] ; incompatible types when assigning to type  int  from type  ID  {aka  struct birth_data }
BoundLost	ID = CONST expected  ;  before  {  token
APIcallWrongUsage	printf ( STRING , ID [ ID ] ) ; subscripted value is neither array nor pointer nor vector
IDNoDef	ID = ID + ID [ ID ] ; ID  undeclared
opWrongUsage	ID + ID = ID ; lvalue required as left operand of assignment
BoundLost	ID = ID - CONST expected  ;  before  }  token
IDNoDef	printf ( STRING , ID - ( ID - CONST ) , ID , ID ) ; ID  undeclared
BoundRedundant	if (  ( ID [ ID ] >= CHARST && ID [ ID ] <= CHARST ) && ( ID [ ID + CONST ] >= CHARST && ID [ ID + CONST ] <= CHARST ) && ( ID [ ID + CONST ] >= CHARST && ID [ ID + CONST ] <= CHARST ) && ID [ ID + CONST ] == ID ( ID [ ID + CONST ] ) ) ) expected statement before  )  token
IDWrongUsage	ID ( * ( ID + ID ) , * ( ID + ID + CONST ) ) ; too few arguments to function  ID
opDataLost	for ( ID = CONST ; ID < ID ; ID + ) expected expression before  )  token
BoundLost	ID = ID * ID expected  ;  before  printf
APIcallWrongUsage	scanf ( STRING & ID , & ID , & ID ) ; invalid operands to binary &
BoundLost	ID ( STRING , CONST ) expected  ;  before  }  token
KeyWordWrongUsage	while ( ) expected expression before  )  token
BoundWrongUsage	continue : expected  ;  before  :  token
BoundLost	ID = ID + CONST expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING , ( ID , ID ) ID ( ID , ID ) , ID ) ; expected  )  before  ID
IDNoDef	ID [ ID + CONST ] = CHART ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	for ( ID = CONST ; ID <= ID / CONST ; ID ++ ) ID  undeclared
NotInclude	for ( ID = CONST ; ID [ ID ] !=\ ID ; ID + ID + CONST ) stray  \  in program
opWrongUsage	while ( ID !=\ CONST ) stray  \  in program
BoundLost	printf ( STRING , ID [ ID - CONST ] ) expected  ;  before  }  token
KeyWordWrongUsage	for ( ID = CONST ; ID < ID ; ID ++ ) expected expression before  }  token
BoundNotMatch	} expected declaration or statement at end of input
APIcallWrongUsage	scanf ( STRING STRING STRING STRING STRING STRING , & ID & ID & ID & ID & ID & ID ) ; invalid operands to binary &
opDataLost	char ID [ ] [ ID ] ; array size missing in  ID
BoundLost	free ( ID [ ID ] ) expected  ;  before  }  token
IDNoDef	for ( ID = ID ; ID <= CONST ; ID ++ ) ID  undeclared
BoundLost	else ( ID > CONST ) expected  ;  before  {  token
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
NotInclude	char * ID ; ID  redeclared as different kind of symbol
BoundLost	ID = ID + ID [ ID ] expected  ;  before  }  token
IDNoDef	return ID ( ID - CONST , ID , ID ) ; ID  undeclared
opLost	ID = ID ^ CONST - CONST ID ; invalid suffix "ac" on integer constant
IDWrongUsage	void ID ( int ID ) redefinition of  ID
BoundLost	ID = CONST expected  ;  before  ID
KeyWordWrongUsage	if ID = CONST { ID ID CONST , } ; expected  (  before  ID
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  printf
opWrongUsage	ID = ( CONST / CONST ) * CONST * ID ^ CONST ; invalid operands to binary ^
BoundLost	printf ( STRING , ID [ CONST ] ) expected  ;  before  ID
APIcallWrongUsage	printf ( CHART STRING ) ; expected  )  before string constant
IDNoDef	printf ( STRING , & ID [ ID ] ) ; ID  undeclared
KeyWordWrongUsage	else expected expression before  }  token
NotInclude	char ID = '\'; missing terminating ' character
BoundLost	printf ( STRING ) expected  ;  before  }  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	if ( ( ID = ID - CONST ) && ID = ID - CONST ) { lvalue required as left operand of assignment
opDataLost	if ( ID [ ID ] == CHARST && ID [ ID + CONST ] != CHARST && ) expected expression before  )  token
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
IDWrongUsage	ID ( CONST , CONST ) ; too many arguments to function  ID
BoundLost	scanf ( STRING , & ID , & ID , & ID , & ID ) expected  ;  before  if
KeyWordWrongUsage	if expected  (  before  return
IDNoDef	ID = ID + ID [ ID ] ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  }  token
APIcallWrongUsage	if ( ID != CONST ) { printf expected  ;  before  }  token
BoundLost	ID ++ expected  ;  before  }  token
NotInclude	ID -> ID = ID : expected  ;  before  :  token
BoundWrongUsage	for ( int ID = ID ; ID >= CONST , ID -- ) expected  ;  before  )  token
BoundLost	while ( ID != CONST ) expected  ;  before  printf
opWrongUsage	if ( ( ID > ID ) || ( ID > CONST && ID = ID ) ) { lvalue required as left operand of assignment
BoundLost	scanf ( STRING , & ID , & ID ) expected  ;  before  for
IDNoDef	printf ( STRING , ID + CONST ) ; ID  undeclared
BoundLost	ID = CONST expected  ;  before  printf
BoundRedundant	if ( ID == ( ID ) % CONST ) ) { expected statement before  )  token
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
KeyWordWrongUsage	else break ; break statement not within loop or switch
opDataLost	for ( ID = CONST ; ID <= ID ; ID + ) { expected expression before  )  token
NotInclude	printf ( STRING , * ( ID . ID ) + ID ) ; invalid type argument of unary  *
APIcallWrongUsage	printf ( STRING ID ID STRING ) ; expected  )  before  ID
IDNoDef	if ( CHARST + ID + ID - CONST >= CHARST ) printf ( STRING , CONST * CHARST + ID + ID - CONST - ID ) ; ID  undeclared
TypeWrongUsage	while ( ID != ID && int ID <= ID ) { expected expression before  int
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	getchar ( ) = ID [ CONST ] ; lvalue required as left operand of assignment
BoundLost	printf ( STRING , ID ) expected  ;  before  if
NotInclude	ID = CONST ; assignment to expression with array type
IDNoDef	return ID ; ID  undeclared
KeyWordWrongUsage	if ( ID ( ID [ ID ] , ID ) ) { incompatible type for argument 2 of  ID
APIcallWrongUsage	printf ( STRING , , ID , ID ) ; expected expression before  ,  token
BoundNotMatch	} expected declaration or statement at end of input
opWrongUsage	for ( int ID = ID ; ID = < ID + ID - ID ; ID ++ ) expected expression before  <  token
BoundLost	ID = ID - ( CHARST - ID ) expected  ;  before  ID
IDNoDef	if ( ID == ID [ CONST ] ) ID  undeclared
IDWrongUsage	ID ( ID + ID , ID ) ; too few arguments to function  ID
opDataLost	if ( [ ID ] >= CHARST && ID [ ID ] <= CHARST ) { expected expression before  [  token
BoundLost	scanf ( STRING , & ID ) expected  ;  before  ID
NotInclude	ID = int ( ID ) ; expected expression before  int
IDNoDef	ID ++ ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
opWrongUsage	for ( int ID = CONST ; ID = < ID ; ID ++ ) expected expression before  <  token
BoundLost	printf ( STRING ) expected  ;  before  return
KeyWordWrongUsage	for ( ID = CONST ; ID < CONST ) { expected  ;  before  )  token
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	ID = ID % ID ; ID  undeclared
NotInclude	ID . ID = ID ; ID  is a pointer; did you mean to use  -> ?
BoundLost	scanf ( STRING , & ID ) expected  ;  before  for
BoundLost	} expected  ; , identifier or  (  before  struct
opWrongUsage	for ( ID = ID ; ID >= CONST ; ID + -- ) expected expression before  )  token
opDataLost	ID ( ID [ ] , ID ) ; expected expression before  ]  token
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	while ( ID >= ID ) { ID  undeclared
APIcallWrongUsage	printf ( STRING , ID , ) ; expected expression before  )  token
opLost	if ( ID . ID < CONST ID ) invalid suffix "year" on floating constant
BoundLost	ID = ID + CONST expected  ;  before  printf
BoundWrongUsage	for ( ID = CONST ; ID < ID , ID ++ ) expected  ;  before  )  token
IDNoDef	while ( ID != ( ID + ID ) ) ID  undeclared
BoundLost	scanf ( STRING , & ID [ ID ] . ID , & ID [ ID ] . ID , & ID [ ID ] . ID ) expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
KeyWordWrongUsage	if ( ( ID + CONST ) / CONST - ID <= ID <= ( ID + CONST ) / CONST ) + ID { expected  ;  before  {  token
IDWrongUsage	void ID ( int ID [ CONST ] [ CONST ] , int CONST ) ; expected  ; , ',' or  )  before numeric constant
BoundLost	} expected  ; , identifier or  (  before  int
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
BoundLost	if ( ID [ ID ] == ID ) return ID expected  ;  before  if
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  for
NotInclude	float ID = ID ( CONST + ( ID * ID ) / CONST ) ; called object  ID  is not a function or function pointer
opWrongUsage	* ID + ID = ( char * ) malloc ( ID * sizeof ( char ) ) ; lvalue required as left operand of assignment
IDNoDef	if ( ID - CONST < ID - ID + ID ) ID  undeclared
BoundLost	ID = ID ( ID [ ID ] ) expected  ;  before  return
KeyWordWrongUsage	else if ( ID > CONST ) { printf ( STRING ) ; } else  without a previous  if
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	scanf ( STRING , & ID ) expected  ;  before  }  token
opDataLost	ID [ ID ] = ID ( ID [ ] , ID , ID [ ID ] ) ; expected expression before  ]  token
IDNoDef	printf ( STRING , ID [ ID - CONST ] ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
BoundRedundant	int ID , ID , ; expected identifier or  (  before  ;  token
APIcallWrongUsage	scanf ( STRING , & ID , & , & ID ) ; expected expression before  ,  token
BoundLost	ID = ID [ ID ] + ID expected  ;  before  }  token
NotInclude	int ID ( int ID [ ] [ ] , int ID , int ID ) array type has incomplete element type  int[]
opWrongUsage	{ for ( ID = ID ; ID = < ID ; ID ++ ) expected expression before  <  token
BoundLost	scanf ( STRING , ID [ ID ] ) expected  ;  before  }  token
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	scanf ( STRING , & ID ) expected  ;  before  return
opDataLost	int ID = ID ( ID [ ] , ID , ID [ ] , ID ) ; expected expression before  ]  token
BoundLost	break expected  ;  before  }  token
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
BoundLost	ID [ ID - CONST - ID ] = & ID [ ID ] expected  ;  before  printf
KeyWordWrongUsage	if ( ID [ ID ] == ID ) { ID = ID ; break ; } break statement not within loop or switch
IDNoDef	scanf ( STRING , ID , ID ) ; ID  undeclared
BoundLost	scanf ( STRING , & ID , & ID , & ID , & ID , & ID ) expected  ;  before  ID
APIcallWrongUsage	else printf ( STRING ) ; else  without a previous  if
BoundLost	else printf ( STRING , ID ) expected  ;  before  }  token
NotInclude	if ( ID == CONST ) (                                     ) expected expression before  )  token
opWrongUsage	for ( ID = ID ; ID = < - CONST ; ID = ID + ID ) { expected expression before  <  token
IDNoDef	if ( ID == ID ) ID = CONST ; printf ( STRING , ID [ CONST ] ) ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
BoundNotMatch	} expected declaration or statement at end of input
IDWrongUsage	ID ( ID + ID , ID - ID ) ; too few arguments to function  ID
BoundLost	ID % CONST == CONST expected  ;  before  }  token
KeyWordWrongUsage	else else  without a previous  if
IDNoDef	if ( ID == ID ) { printf ( STRING ) ; ID  undeclared
opDataLost	int ID [ ] ; array size missing in  ID
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
opWrongUsage	for ( int ID = ID ; ID = < ID + ID - ID ; ID ++ ) expected expression before  <  token
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  }  token
IDNoDef	ID [ ID ] = ID ; ID  undeclared
BoundWrongUsage	printf ( STRING , ID ) : expected  ;  before  :  token
BoundLost	ID ++ expected  ;  before  }  token
NotInclude	ID ( * ( ID + ID ) ) ; incompatible type for argument 1 of  ID
APIcallWrongUsage	printf ( STRING , ID STRING , ID ) ; expected  )  before string constant
IDNoDef	ID = ID [ ID - CONST ] ; ID  undeclared
BoundRedundant	int ID , ID , ID , ID , ID , ; expected identifier or  (  before  ;  token
BoundLost	scanf ( STRING , & ID [ ID ] . ID , & ID [ ID ] . ID , & ID [ ID ] . ID ) expected  ;  before  }  token
BoundLost	ID = ID expected  ;  before  for
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	ID = ID + ID [ ID ] - ID ; ID  undeclared
KeyWordWrongUsage	else else  without a previous  if
TypeWrongUsage	int ID = ID ; redefinition of  ID
IDWrongUsage	ID ( STRING , ID [ CONST ] ) ; too many arguments to function  ID
BoundLost	{ printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
NotInclude	ID ( struct ID * ID ) ; expected expression before  struct
IDNoDef	while ( ! ( ( ID / ( CONST * ID ) ) == CONST ) ) ID  undeclared
BoundLost	ID = ID + ID [ ID ] expected  ;  before  }  token
opWrongUsage	ID ( CONST ) = CONST ; lvalue required as left operand of assignment
APIcallWrongUsage	scanf ( STRING , & ID , & ID , % ID ) ; expected expression before  %  token
opLost	ID = ( CONST / CONST * ID ) ( ( ID * ID ) - ( ID * ID ) ) ; called object is not a function or function pointer
BoundLost	ID expected  ;  before  }  token
IDNoDef	for ( ID = CONST ; ID <= ID - ID ; ID ++ ) { ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING CONST , - CONST , - CONST ) ; expected  )  before numeric constant
BoundLost	ID = ID % CONST expected  ;  before  ID
NotInclude	ID -> ID ID = ID ; struct node  has no member named  ID
BoundLost	printf ( STRING , ID ) expected  ;  before  return
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before numeric constant
BoundLost	if ( ID [ ID ] > ID [ ID ] && ID < ID ) ID ++ expected  ;  before  else
KeyWordWrongUsage	for ( ID = CONST ; ID <= ID ) expected  ;  before  )  token
opWrongUsage	while ( CONST = < ID <= CONST ) { expected expression before  <  token
BoundLost	printf ( STRING , ID ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING ID [ CONST ] [ CONST ] ) ; expected  )  before  ID
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	if ( ID == CONST || ID == CONST || ID == CONST ) { ID  undeclared
BoundLost	ID ++ expected  ;  before  }  token
opDataLost	scanf ( STRING , & ID [ ] ) ; expected expression before  ]  token
BoundLost	if ( ID == CONST ) printf ( STRING , ID ) expected  ;  before  }  token
IDWrongUsage	int ID = ID ( ID ) ; too few arguments to function  ID
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	ID = ID ( ID , ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	scanf ( STRING & ID , & ID ) ; invalid operands to binary &
KeyWordWrongUsage	else else  without a previous  if
BoundRedundant	int * ID , ID , ID = ID , ID = ID + ( ID / CONST ) , ; expected identifier or  (  before  ;  token
opWrongUsage	if ( ID = < ID ) expected expression before  <  token
BoundLost	ID ( ( ID + ID ) , ID ) expected  ;  before  return
NotInclude	ID expected  ;  before  return
BoundWrongUsage	for ( ID = CONST ; ID < ID , ID ++ ) { expected  ;  before  )  token
BoundLost	} else printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
BoundLost	printf ( STRING , ID , ID ) expected  ;  before  for
BoundNotMatch	while ( ID != ID && ID != CHARNST && ID < CONST ) empty character constant
BoundLost	scanf ( STRING ) expected  ;  before  return
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
NotInclude	int ID = CONST ; redefinition of  ID
KeyWordWrongUsage	else { printf ( STRING ) ; } else  without a previous  if
opDataLost	ID ( ID , ID [ ] ) ; expected expression before  ]  token
APIcallWrongUsage	printf ( STRING ID , ID , ID ) ; expected  )  before numeric constant
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	ID = ID ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  for
BoundLost	{   ID = ID [ ID ] + ID [ ID ] expected  ;  before  ID
IDNoDef	printf ( STRING , ID , ID ) ; ID  undeclared
opWrongUsage	if ( ID == CONST || ID = CONST ) { printf ( STRING ) ; } lvalue required as left operand of assignment
BoundLost	{ break } expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING , & ID & ID ) ; invalid operands to binary &
IDWrongUsage	int ID = ID ; redeclaration of  ID  with no linkage
KeyWordWrongUsage	if ( ID * ID ) == ( ID * ID ) expected expression before  ==  token
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	if ( ID [ ID ] == CHART ) { ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
NotInclude	ID [ ID ] . ID = ( ID . ID ) -> ID ; (struct list_entry *)&list_entries  is a pointer; did you mean to use  -> ?
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	for ( ID = CONST ; ID < ID ; ID ++ ) { ID  undeclared
opWrongUsage	if ( ID [ ID ] = > CHARST && ID [ ID ] <= CHARST ) { expected expression before  >  token
BoundLost	printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	scanf ( STRING , & ) expected expression before  )  token
opDataLost	for ( ID = ; ID <= ID ; ID ++ ) { expected expression before  ;  token
IDNoDef	for ( int ID = CONST ; ID < ID ; ID ++ ) ID  undeclared
BoundLost	return CONST expected  ;  before  }  token
opWrongUsage	printf ( STRING , ID * ID ^ CONST ) ; invalid operands to binary ^
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	ID = ID -> ID ; printf ( STRING , ID ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
KeyWordWrongUsage	for ( CONST <= ID <= CONST ; ID ++ ) { expected  ;  before  )  token
IDNoDef	if ( ( ID [ ID ] > ID [ ID ] ) && ( ID < ID ) ) { ID  undeclared
BoundLost	scanf ( STRING , & ID ) expected  ;  before  printf
NotInclude	printf ( STRING , * ID [ ID ] ) ; invalid type argument of unary  *
IDWrongUsage	ID [ CONST ] = ID ( ID [ CONST ] , ID [ CONST ] ) ; too few arguments to function  ID
BoundLost	printf ( STRING , ID [ CONST ] . ID -> ID ) expected  ;  before  return
KeyWordWrongUsage	for ( ID ; ID < CONST ) expected  ;  before  )  token
APIcallWrongUsage	printf ( STRING ID , ID , ID ) ; expected  )  before  ID
BoundLost	ID = ID expected  ;  before  }  token
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	} ID expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
IDNoDef	scanf ( STRING , & ID , & ID , & ID ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  return
opWrongUsage	ID = ID * ID ^ CONST ; invalid operands to binary ^
BoundLost	printf ( STRING , ID ) expected  ;  before  return
TypeWrongUsage	printf ( STRING , int ID ) ; expected expression before  int
IDNoDef	ID = ID ( ID , ID , ID , ID ) ; ID  undeclared
KeyWordWrongUsage	while ( ) { expected expression before  )  token
BoundLost	( ID <= ID - CONST ) { expected  ;  before  {  token
NotInclude	int ID ( int ID , ) expected declaration specifiers or  ...  before  )  token
opDataLost	scanf ( STRING , & ID [ ID ] , & [ ID ] ) ; expected expression before  [  token
BoundLost	ID = CONST expected  ;  before  for
APIcallWrongUsage	printf ( STRING , ID . ID ) ; request for member  ID  in something not a structure or union
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	for ( ID = ID + CONST ; ID < ID ; ID ++ ) { ID  undeclared
BoundWrongUsage	for ( ID = CONST ; ID <= ID , ID ++ ) { expected  ;  before  )  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	ID ++ expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
opWrongUsage	printf ( STRING , ID * ID ) ; invalid operands to binary *
BoundRedundant	int ID , ID , ; expected identifier or  (  before  ;  token
BoundLost	break expected  ;  before  }  token
opLost	printf ( ID * ID - CONST ID = STRING , ID ) ; invalid suffix "ac" on integer constant
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID STRING ) ; expected  )  before  ID
BoundLost	int ID = CONST expected  ,  or  ;  before  while
KeyWordWrongUsage	for ( ID = CONST ; ID = ID + CONST ; ID ++ ) expected expression before  }  token
NotInclude	for ( ( ID = ( CHART ID ) ) ; ( ID <= ( ID - CONST ) ) ; ID -- ) { expected  )  before  ID
BoundLost	printf ( STRING , ID [ ID - CONST ] ) expected  ;  before  return
IDNoDef	printf ( STRING , ID * ID * ID ) ; ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
KeyWordWrongUsage	else if ( ID == ID ) { else  without a previous  if
APIcallWrongUsage	printf ( putchar ( ) ) ; too few arguments to function  putchar
BoundLost	ID = ID + ( ID ) * ( ID + CONST ) / CONST expected  ;  before  }  token
IDNoDef	printf ( STRING , ID [ ID ] ) ; ID  undeclared
opWrongUsage	if ( ID = > CONST ) { expected expression before  >  token
opDataLost	if ( ID == ) expected expression before  )  token
BoundLost	ID ++ expected  ;  before  }  token
NotInclude	char CHARST ; expected identifier or  (  before  c
IDNoDef	if ( ID / ID != ID / ID ) ID  undeclared
BoundLost	int main ( ) { printf ( STRING , CONST * CONST * CONST ) expected  ;  before  return
BoundWrongUsage	for ( ID = CONST , ID < ID ; ID ++ ) { expected  ;  before  )  token
APIcallWrongUsage	scanf ( STRING , ID , & ID , & , ID , & ID ) ; expected expression before  ,  token
BoundLost	else printf ( STRING ) expected  ;  before  return
IDNoDef	scanf ( STRING , & ID , & ID , & ID , & ID ) ; ID  undeclared
opWrongUsage	for ( int ID = ID ; ID = < ID + ID - ID ; ID ++ ) expected expression before  <  token
IDWrongUsage	ID ( ID ) ; too few arguments to function  ID
BoundLost	return CONST expected  ;  before  }  token
NotInclude	} expected expression before  ID  token
KeyWordWrongUsage	else if ( ID == CONST ) else  without a previous  if
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  return
IDNoDef	ID [ ID - ID - CONST ] = ID ; ID  undeclared
APIcallWrongUsage	getchar ( ID ) ; too many arguments to function  getchar
BoundRedundant	float ID = CONST , ID = CONST , ID = CONST , ID = CONST , ID = CONST , ID = CONST , ; expected identifier or  (  before  ;  token
BoundLost	} expected  ; , identifier or  (  before  int
BoundLost	ID [ ID ] = ID expected  ;  before  }  token
opDataLost	printf ( STRING , ID [ ] ) ; expected expression before  ]  token
IDNoDef	ID . ID = ( int * ) malloc ( ID * sizeof ( int ) ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING , ID ID ID ) ; expected  )  before  ID
BoundNotMatch	} expected declaration or statement at end of input
opWrongUsage	if ( ( ID <= CHARST && ID >= CHARST ) || ( ID <= CHARST && ID = > CHARST ) ) { expected expression before  >  token
BoundLost	( ID >= ID ) && ( ID >= ID ) expected  ;  before  scanf
BoundLost	return CONST expected  ;  before  }  token
KeyWordWrongUsage	else expected expression before  }  token
NotInclude	if ( ( ID -> ID . ID <= ID -> ID . ID ) && ( ID -> ID . ID <= ID -> ID . ID ) ) ID  {aka  struct rect } has no member named  ID ; did you mean  ID ?
BoundLost	ID [ ID ] = ID [ ID ] ID [ ID ] ; expected  ;  before  ID
IDWrongUsage	ID = ID ( ) ; too few arguments to function  ID
IDNoDef	ID ( ID , ID , ID ) ; ID  undeclared
BoundLost	ID = ID expected  ;  before  printf
opWrongUsage	if ( ID >= CONST || ID = < ( - CONST ) ) expected expression before  <  token
BoundLost	printf ( STRING , ID ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING , , ID ) ; expected expression before  ,  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	for ( ID = ID ; ID <= ID ; ID ++ ) ID  undeclared
opDataLost	for ( ID = CONST ; ID <  ; ID ++ ) { expected expression before  ;  token
APIcallWrongUsage	scanf ( STRING , & ID [ ID ] [ ID ] / ID ) ; invalid operands to binary /
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	{  ID = CONST expected  ;  before  ID
KeyWordWrongUsage	for ( ID = CONST ; ID <= ID ; ID ++ ) expected expression before  }  token
BoundLost	printf ( STRING , ID [ CONST ] ) expected  ;  before  return
IDNoDef	scanf ( STRING , & ( * ( * ( ID + ID ) + ID ) ) ) ; ID  undeclared
NotInclude	ID ( ID != ID || ID < CONST ) expected  ;  before  {  token
APIcallWrongUsage	scanf ( STRING , & , ID , ID , ID , ID , ID ) ; expected expression before  ,  token
opLost	ID = ID ( CONST + ( ID * ID / CONST ) ) ; called object  ID  is not a function or function pointer
BoundLost	ID = ID * ID * ( ID - ID ) / ( ID * ID - ID * ID ) expected  ;  before  if
KeyWordWrongUsage	if ID + ID <= ID - CONST ; expected  (  before  ID
opWrongUsage	ID = ID + ID [ ID ] = ID [ ID - CONST ] ; lvalue required as left operand of assignment
IDNoDef	else if ( ID < CONST + ID && ID >= CONST - ID ) { ID  undeclared
APIcallWrongUsage	printf ( STRING . ) ; expected identifier before  )  token
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	ID = ID expected  ;  before  for
BoundLost	ID ++ expected  ;  before  }  token
BoundWrongUsage	for ( int ID = CONST ; ID < ID , ID ++ ) { expected  ;  before  )  token
IDNoDef	ID [ ID ] = CONST ; ID  undeclared
BoundLost	printf ( STRING , ID ( ID [ ID ] ) ) expected  ;  before  }  token
opDataLost	CONST <= ID && ID <= CONST , CONST <= ID && <= CONST ; expected expression before  <=  token
APIcallWrongUsage	puts ( STRING , ID ) ; too many arguments to function  puts
IDWrongUsage	ID ( ID , ID - CONST , ID + CONST ) ; too few arguments to function  ID
KeyWordWrongUsage	else ( ID * ID != ID * ID ) { ; expected  ;  before  {  token
BoundLost	printf ( STRING ) } expected  ;  before  }  token
TypeWrongUsage	int ID = CONST ; redeclaration of  ID  with no linkage
IDNoDef	if ( ID [ ID ] [ ID ] < ID ) { ID  undeclared
BoundLost	scanf ( STRING , & ID ) expected  ;  before  for
NotInclude	` stray  `  in program
opWrongUsage	{ ID = - CONST * ID ; } invalid operands to binary *
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
IDNoDef	while ( ID [ ID ] != CHART ) ID  undeclared
BoundRedundant	float ID , ; expected identifier or  (  before  ;  token
BoundLost	printf ( STRING ) expected  ;  before  for
BoundNotMatch	} expected declaration or statement at end of input
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
BoundLost	ID = ID ( ID ) expected  ;  before  }  token
opWrongUsage	ID = ID + ID ( - CONST , ID + CONST + CONST ) * ( * ( ID + ID ) ) * ID ( ID , ID - CONST ) ; invalid operands to binary *
KeyWordWrongUsage	else else  without a previous  if
BoundLost	printf ( STRING , ID [ ID - CONST - ID ] ) expected  ;  before  }  token
IDNoDef	for ( ID = CONST ; ID <= ( ID - CONST ) ; ID ++ ) ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  return
IDNoDef	printf ( STRING , ID , ID [ ID ] ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING STRING ID STRING ) ; expected  )  before  ID
BoundLost	int ID = CHARST expected  ,  or  ;  before  scanf
NotInclude	printf ( STRING , int ( CHARST ) * CONST ) ; expected expression before  int
IDNoDef	ID = ID ; ID  undeclared
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
BoundNotMatch	} expected declaration or statement at end of input
opDataLost	ID = ID [ ID - ID - ] ; expected expression before  ]  token
opWrongUsage	if ( ID == ( ( ID - ID ) / ( ID * ID - ID * ID ) ) && ( ( ID * ID - ID * ID ) != = CONST ) && ID == ( ( ID - ID ) / ( ID * ID - ID * ID ) ) ) { expected expression before  =  token
KeyWordWrongUsage	}	return CONST ; expected identifier or  (  before  return
BoundLost	printf ( STRING , ID ) expected  ;  before  ID
IDNoDef	float ID = ( CONST / CONST ) * ( ID ) * ( ( ID * ID * CONST ) - ( ID * ID ) ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID , ID , ID , ID , ID ) ; expected  )  before  ID
BoundWrongUsage	for ( ID = CONST , ID < ID ; ID ++ ) expected  ;  before  )  token
IDWrongUsage	free ( ID , ID , ID ) ; too many arguments to function  free
BoundLost	printf ( STRING ) expected  ;  before  return
IDNoDef	if ( ID == CONST ) { ID  undeclared
NotInclude	ID = ID + ID [ CONST ] [ ID ] ; subscripted value is neither array nor pointer nor vector
opWrongUsage	while ( ID [ ID ] !=\ CONST ) stray  \  in program
BoundLost	printf ( STRING , ID ) expected  ;  before  return
APIcallWrongUsage	scanf ( STRING & ID , & ID , & ID ) ; invalid operands to binary &
BoundRedundant	if ( ( ID * ID + ID * ID < ID * ID ) || ( ID * ID + ID * ID < ID * ID ) || ( ID * ID + ID * ID < ID * ID ) ) ) expected statement before  )  token
KeyWordWrongUsage	if ID [ ID ] = ID [ ID ] { printf ( STRING ) ; } expected  (  before  ID
BoundLost	ID = CHARST expected  ;  before  printf
IDNoDef	printf ( STRING , ID [ CONST ] ) ; ID  undeclared
BoundLost	continue expected  ;  before  }  token
APIcallWrongUsage	ID = getchar ( CONST ) ; too many arguments to function  getchar
BoundLost	return ID ( ID , ID , ID , ID + CONST , ID ) || ID ( ID , ID , ID , ID , ID + CONST ) expected  ;  before  }  token
IDNoDef	scanf ( STRING , ID , ID , ID ) ; ID  undeclared
opWrongUsage	while ( ID != ID && ID < CONST && ID = CHART ) { lvalue required as left operand of assignment
BoundLost	printf ( STRING , ID [ CONST ] ) expected  ;  before  return
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING ) expected  ;  before  }  token
opDataLost	ID = ( ID * CONST ) + ID % % CONST ; expected expression before  %  token
KeyWordWrongUsage	if ( ID [ CONST ] == CONST ) expected expression before  else
opWrongUsage	for ( ID = CONST ; ID < ID / CONST ; ID ++ ) { invalid operands to binary /
APIcallWrongUsage	printf ( STRING , ID STRING , ID ) ; expected  )  before string constant
IDNoDef	ID += ID [ ID ] ; ID  undeclared
BoundLost	int ID [ ID ] expected  = , ',',  ; ,  asm  or  __attribute__  before  return
NotInclude	* ( ID + ID ) = ID ; stray  \1  in program
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID , & ID ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID -> ID ) ; expected  )  before  ID
BoundLost	ID ++ expected  ;  before  }  token
IDNoDef	scanf ( STRING , & ID [ ID ] [ ID ] ) ; ID  undeclared
KeyWordWrongUsage	break ; break statement not within loop or switch
BoundLost	printf ( STRING , ID ) expected  ;  before  for
APIcallWrongUsage	scanf ( STRING ID ) ; expected  )  before  ID
BoundLost	ID = ID expected  ;  before  }  token
opWrongUsage	if ( ID + ID = ID && ID ( ID ) == CONST && ID ( ID ) == CONST ) { lvalue required as left operand of assignment
NotInclude	float CONST * ID * ID ; expected identifier or  (  before numeric constant
IDNoDef	if ( * ID == CHART ) ID ; ID  undeclared
BoundLost	int main ( ) { printf ( STRING ) expected  ;  before  return
IDWrongUsage	int ID = CONST ; redeclaration of  ID  with no linkage
opLost	for ( int ID = CONST ID ; ID < CONST ; ID ++ ) invalid suffix "x1" on floating constant
opDataLost	ID = ID ( ID [ ] , ID ) ; expected expression before  ]  token
BoundRedundant	} expected identifier or  (  before  }  token
KeyWordWrongUsage	else if ( ID == CHARST ) expected expression before  }  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
TypeWrongUsage	int ID = CONST ; redeclaration of  ID  with no linkage
IDNoDef	for ( int ID = CONST ; ID <= ID ; ID ++ ) ID  undeclared
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	printf ( STRING , ) ; expected expression before  )  token
BoundWrongUsage	for ( ID = CONST ; ID <= ( ID - CONST ) , ID ++ ) expected  ;  before  )  token
IDNoDef	scanf ( STRING , * ( ID + ID ) + ID ) ; ID  undeclared
BoundLost	if ( ID [ ID ] > CONST ) { printf ( STRING , ID ) } expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING , ID ) expected  ;  before  return
opWrongUsage	if ( ID [ ID [ ID ] < ID [ ID [ ID - CONST ] ] && ID [ ID [ ID ] ] < ID [ ID [ ID + CONST ] ] ) expected  ]  before  )  token
BoundLost	printf ( STRING ) expected  ;  before  return
opDataLost	ID ( ID [ ] ) ; expected expression before  ]  token
BoundLost	ID += ID [ ID ] [ ID ] expected  ;  before  return
IDNoDef	printf ( STRING , ID [ ID ] [ ID ] ) ; ID  undeclared
BoundLost	ID = CONST / CONST * ID * ( ID * ID - ID * ID ) expected  ;  before  printf
KeyWordWrongUsage	break ; break statement not within loop or switch
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID ) ; invalid operands to binary &
NotInclude	int * ID [ ID ] = ( int * ) malloc ( sizeof ( int ) * ( ID + CONST ) ) ; variable-sized object may not be initialized
IDNoDef	for ( ID = ID ; ID < ID ; ID ++ ) { ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  }  token
BoundLost	printf ( STRING , ID [ ID ] [ ID ] ) expected  ;  before  }  token
opWrongUsage	while ( ID [ ID ] !=\ CONST ) { stray  \  in program
BoundLost	printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	scanf ( STRING , & CHART ) ; lvalue required as unary  &  operand
IDNoDef	ID = ID + ID % CONST ; ID  undeclared
IDWrongUsage	ID = ( struct ID * ) calloc ( CONST * sizeof ( struct ID ) ) ; too few arguments to function  calloc
BoundLost	} expected  ; , identifier or  (  before  struct
BoundNotMatch	return CONST ; expected declaration or statement at end of input
BoundLost	printf ( STRING , ID ) expected  ;  before  return
opDataLost	for ( ID = ID ; ID != CHART ; ++ ) expected expression before  )  token
BoundLost	ID [ ID ] = ( ID [ ID ] ) * ( ID [ ID ] ) expected  ;  before  ID
APIcallWrongUsage	printf ID ; expected  ;  before  ID
opLost	{ ID = ID + ( ID ( ID - CONST ID ) ) * ID ; } invalid suffix "x" on integer constant
KeyWordWrongUsage	else ( ID > CONST ) expected  ;  before  {  token
IDNoDef	double ID = ( ID -> ID ) - ( ID - ID ) ; ID  undeclared
NotInclude	int [ ID ] ; expected identifier or  (  before  [  token
BoundLost	ID = ID * CONST + ID % CONST expected  ;  before  ID
BoundLost	ID ++ expected  ;  before  }  token
IDNoDef	for ( ; ID [ ID ] != CHART ; ID ++ ) ID  undeclared
APIcallWrongUsage	scanf ( STRING STRING STRING STRING STRING STRING , & ID , & ID & ID , & ID , & ID , & ID ) ; invalid operands to binary &
BoundLost	ID [ ID + CONST ] = ID [ ID ] expected  ;  before  }  token
IDNoDef	return ID ( ID - CONST , ID , ID , ID ) + ID ( ID - CONST , ID , ID , ID ) ; ID  undeclared
BoundWrongUsage	for ( int ID = CONST ; ID <= ID , ID ++ ) { expected  ;  before  )  token
opWrongUsage	for ( int ID = CONST ; ID [ ID ! ] = CHART ; ID ++ ) { expected  ]  before  !  token
opDataLost	if ( ID ( ID + CONST , ID + ID [ ] ) || ID ( ID + CONST , ID ) == CONST ) return CONST ; else return CONST ; expected expression before  ]  token
IDNoDef	{ scanf ( STRING , & ID [ ID ] [ ID ] ) ; printf ( STRING , ID [ ID ] [ ID ] ) ; } ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  }  token
KeyWordWrongUsage	if ( ID -> ID == ID ) ID  {aka  struct node } has no member named  ID
APIcallWrongUsage	printf ( STRING , ID ID ) ; expected  )  before  ID
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  for
opWrongUsage	if ( ID [ CONST ] = ID [ CONST ] && ID [ CONST ] = ID [ CONST ] ) lvalue required as left operand of assignment
BoundRedundant	if ( ( ID [ ID ] <= ID ) && ( ( CONST + ID [ ID ] ) > ID [ ID ] ) ) ) { expected statement before  )  token
IDNoDef	ID [ ID ] = ID [ ID ] ; ID  undeclared
BoundLost	ID = ID + ID ( ID [ ID ] ) * ID expected  ;  before  }  token
BoundLost	ID = ID + CONST expected  ;  before  }  token
KeyWordWrongUsage	{ for ( ID = ID ; ) { for ( ID = CONST ; ID <= ID ; ID ++ ) expected expression before  )  token
BoundLost	scanf ( STRING , & ID ) expected  ;  before  return
IDWrongUsage	printf ( STRING , ID ( ID , ID , CONST ) , ID ) ; too many arguments to function  ID
NotInclude	int main ( ) { int ID , ID , * ID ] ; expected  = , ',',  ; ,  asm  or  __attribute__  before  ]  token
APIcallWrongUsage	printf ( STRING ID , ID , ID , ID ) ; expected  )  before numeric constant
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	int ID = ID [ CONST ] [ CONST ] , ID = ID [ CONST ] [ CONST ] ; ID  undeclared
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  if
BoundLost	printf ( STRING ) expected  ;  before  }  token
IDNoDef	ID [ ID ] = ID [ ID ] + CHARST ; ID  undeclared
NotInclude	int ID , ID , ID [ ID ] ; ID  redeclared as different kind of symbol
APIcallWrongUsage	scanf ( STRING , & ID & ID & ID & ID ) ; invalid operands to binary &
BoundLost	printf ( STRING ) expected  ;  before  }  token
opWrongUsage	ID = CONST * ID -> ID ; invalid operands to binary *
BoundLost	printf ( STRING ) expected  ;  before  return
opDataLost	if ( ID == CONST && ) { expected expression before  )  token
TypeWrongUsage	int * * ID = ( int * * ) malloc ( sizeof ( int * ) * ID ) ; redeclaration of  ID  with no linkage
BoundLost	printf ( STRING , CHARST + ID + ID - CONST - CONST - CONST ) expected  ;  before  }  token
IDNoDef	return  CONST + ID ( ID , ++ ID , -- ID , ID ) ; ID  undeclared
APIcallWrongUsage	scanf ( STRING , & ID , % ID , % ID ) ; expected expression before  %  token
NotInclude	} expected statement before  )  token
KeyWordWrongUsage	ID ( ( ( ( ID * ID ) - ( ID * ID ) ) != CONST ) && ( ( ( ID * ID ) - ( ID * ID ) ) != CONST ) ) expected  ;  before  {  token
BoundLost	printf ( STRING , ID * ( ID * CONST + ID ) ) expected  ;  before  return
IDNoDef	if ( ID == CONST ) ID  undeclared
BoundLost	int main ( ) { printf ( STRING ) expected  ;  before  return
APIcallWrongUsage	scanf ( STRING , & ID [ ID ] & ID [ ID + CONST ] & ID [ ID + CONST ] ) ; invalid operands to binary &
BoundLost	printf ( STRING , ID ) expected  ;  before  break
opLost	printf ( STRING , ID ( CONST + ID * ID / CONST ) , ID , ID ) ; called object  ID  is not a function or function pointer
IDNoDef	for ( ID = CONST ; ID <= ID ; ID ++ ) ID  undeclared
IDWrongUsage	ID ( ID , ID , ID , ID ) ; too many arguments to function  ID
BoundNotMatch	} expected declaration or statement at end of input
IDNoDef	scanf ( STRING , & ID ) ; ID  undeclared
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
opDataLost	ID [ ] = getchar ( ) ; expected expression before  ]  token
BoundLost	printf ( STRING ) expected  ;  before  return
NotInclude	ID = ID ( ID , ID , ID ) ; void value not ignored as it ought to be
opWrongUsage	else if ( ( ID * ID + ID * ID + ID * ID < CONST * ID * ID ) && ( ID * ID + ID * ID + ID * ID > * ID * ID ) ) invalid type argument of unary  *
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  ID
KeyWordWrongUsage	else if ( ID [ ID [ ID ] ] < ID [ ID + CONST ] && ID [ ID [ ID ] ] << ID [ ID - CONST ] ) else  without a previous  if
BoundWrongUsage	for ( ID = CONST ; ID <= ID , ID ++ ) expected  ;  before  )  token
BoundLost	printf ( STRING , ID ) expected  ;  before  return
IDNoDef	printf ( STRING , ID ) ; ID  undeclared
BoundLost	ID = CONST expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING , ID , ID , ID , ) ; expected expression before  )  token
NotInclude	else if ( ( ID -> ID . ID >= ID . ID . ID ) && ( ID -> ID . ID <= ID -> ID . ID ) && ( ID -> ID . ID >= ID -> ID . ID ) && ( ID -> ID . ID <= ID -> ID . ID ) ) { ID  is a pointer; did you mean to use  -> ?
IDNoDef	ID [ ID ] = ID [ ID ] ; ID  undeclared
opWrongUsage	for ( ID = CONST ; ID < CONST || ID = ID ; ID ++ ) lvalue required as left operand of assignment
BoundLost	printf ( STRING , ID [ ID ] ) expected  ;  before  }  token
BoundLost	ID [ ID ] . ID = ID expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING & ID ) ; invalid operands to binary &
BoundNotMatch	} expected declaration or statement at end of input
opDataLost	printf ( STRING , ID [ ] ) ; expected expression before  ]  token
BoundLost	printf ( STRING ) expected  ;  before  return
KeyWordWrongUsage	for ( ID = ID + CONST ; ID <= CONST ) expected  ;  before  )  token
IDNoDef	if ( ID [ ID ] == CHART ) ID  undeclared
BoundLost	} expected  ; , identifier or  (  before  int
opWrongUsage	if ( ID [ ID ] =\ CONST )  break ; stray  \  in program
APIcallWrongUsage	printf ( STRING . ID ) ; request for member  ID  in something not a structure or union
BoundLost	} expected  ; , identifier or  (  before  struct
IDNoDef	scanf ( STRING , & ID [ ID ] ) ; ID  undeclared
BoundLost	ID [ ID ] = ID expected  ;  before  }  token
IDWrongUsage	int ID ; int ID , ID , ID ; int ID [ CONST ] ; int ID = CONST ; int ID = CONST ; redeclaration of  ID  with no linkage
KeyWordWrongUsage	ID ID ; expected  ;  before  ID
NotInclude	struct ID * ID , ID * ID ; expected  = , ',',  ; ,  asm  or  __attribute__  before  *  token
BoundLost	printf ( STRING ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING ID ) ; expected  )  before  ID
IDNoDef	ID = ID + ID [ ID ] ; ID  undeclared
opWrongUsage	if ( ID = ( ID * ID * ( ID - ID ) ) / ( ID * ID - ID * ID ) && ID = ( ID * ID * ( ID - ID ) ) / ( ID * ID - ID * ID ) ) { lvalue required as left operand of assignment
BoundLost	for ( ID = CONST ; ID < ID + CONST ; ID = ID + CONST ) { printf ( STRING , ID [ ID ] ) expected  ;  before  if
BoundRedundant	} expected identifier or  (  before  }  token
IDNoDef	ID = ID ( ID , ID [ ID ] ) ; ID  undeclared
BoundLost	printf ( STRING , ID ) expected  ;  before  printf
APIcallWrongUsage	{  printf ( STRING ID ) ; expected  )  before  ID
BoundWrongUsage	ID = ID : expected  ;  before  :  token
NotInclude	ID == ( CONST ) * ID * ID ^ CONST expected  ;  before  printf
opLost	ID = ID ( CONST + ( ID * ID ) / CONST ) ; called object  ID  is not a function or function pointer
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  for
opWrongUsage	if ( ID = CONST || ID = CONST * ID + CONST ) { lvalue required as left operand of assignment
BoundNotMatch	} expected declaration or statement at end of input
BoundLost	printf ( STRING , ID ) expected  ;  before  }  token
IDNoDef	ID [ ID ] = ID [ ID ] + ID ; ID  undeclared
KeyWordWrongUsage	else printf ( STRING , ID , ID , ID , ID , - ID ) ; else  without a previous  if
BoundLost	ID = ID [ ID ] + ID [ ID ] - CHARST - CONST expected  ;  before  }  token
APIcallWrongUsage	printf ( ) ; too few arguments to function  printf
IDNoDef	if ( ID == ID [ ID ] ) { ID  undeclared
IDWrongUsage	return ID ( ID [ ID - CONST ] ) ; too few arguments to function  ID
BoundLost	} expected  ; , identifier or  (  before  struct
opDataLost	if ( ID ( ID [ ] , ID ) == CONST ) { expected expression before  ]  token
opWrongUsage	for ( ID = CONST ; ID [ ID ] !=\ CONST ; ID ++ ) stray  \  in program
BoundLost	ID = ID * ( ( ID * ID ) - ( ID * ID ) ) / CONST expected  ;  before  printf
IDNoDef	ID = ID [ ID ] / ID ; ID  undeclared
NotInclude	ID = ID . ( ) ; expected identifier before  (  token
BoundLost	ID ++ expected  ;  before  }  token
APIcallWrongUsage	scanf ( STRING & ID , & ID ) ; invalid operands to binary &
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  }  token
IDNoDef	ID ( ID , ID , ID , ID ) ; ID  undeclared
KeyWordWrongUsage	break ; break statement not within loop or switch
BoundNotMatch	} expected declaration or statement at end of input
NotInclude	# ID < ID . ID > invalid preprocessing directive #iclude; did you mean #include?
BoundLost	ID = ID + ID [ ID ] [ ID ] expected  ;  before  printf
APIcallWrongUsage	scanf ( STRING & ID [ ID ] ) ; invalid operands to binary &
opWrongUsage	* ( ID + ID ) = * ( ID + ID ) ; invalid operands to binary *
BoundLost	printf ( STRING , ID ) expected  ;  before  ID
IDNoDef	for ( ID = ID ; ID <= ID ; ID = ID ) { ID  undeclared
BoundLost	ID ( ID , ID ) expected  ;  before  }  token
APIcallWrongUsage	printf ( STRING , ID , , ID , ID , ID ) ; expected expression before  ,  token
opDataLost	printf ( STRING , ID ( ID [ ] , ID [ ] ) ) ; expected expression before  ]  token
BoundLost	ID = ID / CONST expected  ;  before  }  token
IDNoDef	double ID = ( CONST * ( ID ( ID , CONST ) ) ) - ( CONST * ( ID ) ) ; ID  undeclared
BoundLost	printf ( STRING ) expected  ;  before  }  token
KeyWordWrongUsage	if ( ID [ CONST ] == CONST && ID [ CONST ] != CONST ) expected expression before  }  token
BoundLost	ID = ID % CONST expected  ;  before  switch
APIcallWrongUsage	printf (\ ID ) ; stray  \  in program
IDNoDef	ID ( ID , ID , ID , ID + CONST ) ; ID  undeclared
BoundLost	scanf ( STRING , & ID [ ID ] ) expected  ;  before  }  token
NotInclude	struct ID expected identifier or  (  before  return
BoundLost	printf ( STRING , ID [ CONST ] [ CONST ] ) expected  ;  before  return
opWrongUsage	if ( ID >= ID ) : break ; expected expression before  :  token
BoundLost	} printf ( STRING , ID ) expected  ;  before  return
